[
["index.html", "Spatial Data Science Preface", " Spatial Data Science Edzer Pebesma, Roger Bivand 2019-01-15 Preface Data science is concerned with finding answers to questions on the basis of available data, and communicating that effort. Besides showing the results, this communication involves sharing the data used, but also exposing the path that led to the answers in a comprehensive and reproducible way. It also acknowledges the fact that available data may not be sufficient to answer questions, and that any answers are conditional on the data collection or sampling protocols employed. This book introduces and explains the concepts underlying spatial data: points, lines, polygons, rasters, coverages, geometry attributes, data cubes, reference systems, as well as higher-level concepts including how attributes relate to geometries and how this affects analysis. The relationship of attributes to geometries is known as support, and changing support also changes the characteristics of attributes. Some data generation processes are continuous in space, and may be observed everywhere. Others are discrete, observed in tesselated containers. In modern spatial data analysis, tesellated methods are often used for all data, extending across the legacy partition into point process, geostatistical and lattice models. It is support (and the understanding of support) that underlies the importance of spatial representation. The book aims at data scientists who want to get a grip on using spatial data in their analysis. To exemplify how to do things, it uses R. It is often thought that spatial data boils down to having observations’ longitude and latitude in a dataset, and treating these just like any other variable. This carries the risk of missed opportunities and meaningless analyses. For instance, coordinate pairs really are pairs, and lose much of their meaning when treated separately rather than having point locations, observations are often associated with spatial lines, areas, or grid cells spatial distances between observations are often not well represented by straight-line distances, but by great circle distances, distances through networks, or by measuring the effort it takes to get from A to B We introduce the concepts behind spatial data, coordinate reference systems, spatial analysis, and introduce a number of packages, including sf (Pebesma 2018c, Pebesma (2018b)), lwgeom (Pebesma 2018a), and stars (Pebesma 2018d), as well as a number of tidyverse (Wickham 2017) extensions, and a number of spatial analysis packages that can be used with these packages, including gstat (Pebesma and Graeler 2019), spdep (Bivand 2018b) and spatstat (Baddeley, Turner, and Rubak 2018). This work is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International License. References "],
["intro.html", "Chapter 1 Getting Started 1.1 A first map 1.2 Reading and writing 1.3 Exercises", " Chapter 1 Getting Started This chapter gives a quick start to get you going with spatial data science with R. It is easier to read when understanding R at the level of, say, R for Data Science (Wickham and Grolemund 2017). 1.1 A first map There is a lot to say about spatial data, but let us first create a map. We can create a simple map by: library(tidyverse) #&gt; ── Attaching packages ────────────────────────────────── tidyverse 1.2.1 ── #&gt; ✔ ggplot2 3.1.0 ✔ purrr 0.2.5.9000 #&gt; ✔ tibble 2.0.0 ✔ dplyr 0.8.0.9000 #&gt; ✔ tidyr 0.8.2 ✔ stringr 1.3.1 #&gt; ✔ readr 1.2.1 ✔ forcats 0.3.0 #&gt; ── Conflicts ───────────────────────────────────── tidyverse_conflicts() ── #&gt; ✖ dplyr::filter() masks stats::filter() #&gt; ✖ dplyr::lag() masks stats::lag() library(sf) #&gt; Linking to GEOS 3.7.0, GDAL 2.3.2, PROJ 5.2.0 system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32119) %&gt;% select(BIR74) %&gt;% plot(graticule = TRUE, axes = TRUE) Figure 1.1: a first map A lot went on, here. We will describe the steps in detail. First, we loaded two R packages: library(tidyverse) library(sf) where tidyverse is needed for the tidyverse functions and methods, and sf is needed for the spatial commands and spatial tidyverse methods. Package sf implements simple features, a standardised way to encode vector data (points, lines, polygons). We will say more about simple features in chapter 3. Most commands in package sf start with st_, short for spatiotemporal, a convention it shares with e.g. PostGIS. The %&gt;% (pipe) symbols should be read as then: we read a %&gt;% b() %&gt;% c() %&gt;% d(n = 10) as with a do b then c then d, and that is just alternative syntax for d(c(b(a)), n = 10) or tmp1 &lt;- b(a) tmp2 &lt;- c(tmp1) tmp3 &lt;- d(tmp2, n = 10) To many, the pipe-form is easier to read because execution order follows reading order (from left to right). Like nested function calls, it avoids the need to choose names for intermediate results. For the illustration we picked a data file that comes with sf, the location of which depends on the operating system used. The following will give a different output on your computer: (file &lt;- system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;)) #&gt; [1] &quot;/home/edzer/R/x86_64-pc-linux-gnu-library/3.5/sf/gpkg/nc.gpkg&quot; Never use system.file if you want to read your own data; in that case, fname should be the data source (typically file or path) name (section 1.2). (Parens around this expression are used to have the result not only stored, but also printed.) Then, we read this file into R using read_sf: (file %&gt;% read_sf() -&gt; nc) #&gt; Simple feature collection with 100 features and 14 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6 #&gt; epsg (SRID): 4267 #&gt; proj4string: +proj=longlat +datum=NAD27 +no_defs #&gt; # A tibble: 100 x 15 #&gt; AREA PERIMETER CNTY_ CNTY_ID NAME FIPS FIPSNO CRESS_ID BIR74 SID74 #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0.114 1.44 1825 1825 Ashe 37009 37009 5 1091 1 #&gt; 2 0.061 1.23 1827 1827 Alle… 37005 37005 3 487 0 #&gt; 3 0.143 1.63 1828 1828 Surry 37171 37171 86 3188 5 #&gt; 4 0.07 2.97 1831 1831 Curr… 37053 37053 27 508 1 #&gt; 5 0.153 2.21 1832 1832 Nort… 37131 37131 66 1421 9 #&gt; 6 0.097 1.67 1833 1833 Hert… 37091 37091 46 1452 7 #&gt; # … with 94 more rows, and 5 more variables: NWBIR74 &lt;dbl&gt;, BIR79 &lt;dbl&gt;, #&gt; # SID79 &lt;dbl&gt;, NWBIR79 &lt;dbl&gt;, geom &lt;MULTIPOLYGON [°]&gt; which creates a “spatial tibble”: class(nc) #&gt; [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; This object is transformed into a new coordinate reference system (North Carolina State Plane, with EPSG code 32119): (nc %&gt;% st_transform(32119) -&gt; nc.32119) #&gt; Simple feature collection with 100 features and 14 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 124000 ymin: 14700 xmax: 931000 ymax: 318000 #&gt; epsg (SRID): 32119 #&gt; proj4string: +proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; # A tibble: 100 x 15 #&gt; AREA PERIMETER CNTY_ CNTY_ID NAME FIPS FIPSNO CRESS_ID BIR74 SID74 #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0.114 1.44 1825 1825 Ashe 37009 37009 5 1091 1 #&gt; 2 0.061 1.23 1827 1827 Alle… 37005 37005 3 487 0 #&gt; 3 0.143 1.63 1828 1828 Surry 37171 37171 86 3188 5 #&gt; 4 0.07 2.97 1831 1831 Curr… 37053 37053 27 508 1 #&gt; 5 0.153 2.21 1832 1832 Nort… 37131 37131 66 1421 9 #&gt; 6 0.097 1.67 1833 1833 Hert… 37091 37091 46 1452 7 #&gt; # … with 94 more rows, and 5 more variables: NWBIR74 &lt;dbl&gt;, BIR79 &lt;dbl&gt;, #&gt; # SID79 &lt;dbl&gt;, NWBIR79 &lt;dbl&gt;, geom &lt;MULTIPOLYGON [m]&gt; and a single attribute column is selected (nc.32119 %&gt;% select(BIR74) -&gt; nc.32119.bir74) #&gt; Simple feature collection with 100 features and 1 field #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 124000 ymin: 14700 xmax: 931000 ymax: 318000 #&gt; epsg (SRID): 32119 #&gt; proj4string: +proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; # A tibble: 100 x 2 #&gt; BIR74 geom #&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [m]&gt; #&gt; 1 1091 (((387345 278387, 381334 282774, 379438 282943, 373250 290553, 363… #&gt; 2 487 (((408602 292425, 408565 293985, 406643 296873, 406420 3e+05, 4023… #&gt; 3 3188 (((478717 277490, 476936 278867, 471503 279173, 470806 281394, 469… #&gt; 4 508 (((878194 289128, 877381 291117, 875994 290881, 874941 292805, 870… #&gt; 5 1421 (((769835 277796, 768364 274842, 762616 274401, 763168 269009, 761… #&gt; 6 1452 (((812328 277876, 791158 277012, 789882 277579, 777724 277107, 769… #&gt; # … with 94 more rows Finally, the result is plotted, with the command: nc.32119.bir74 %&gt;% plot(graticule = TRUE, axes = TRUE) as shown in figure 1.1. Splitting up the steps lets us see what is happening, as errors from combined steps can be hard to assign to the right step. Repeating the same sequence, but with the wrong argument to st_transform gives: system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32999) %&gt;% select(BIR74) %&gt;% plot(graticule = TRUE, axes = TRUE) #&gt; Warning in CPL_crs_from_epsg(as.integer(x)): GDAL Error 6: EPSG PCS/GCS #&gt; code 32999 not found in EPSG support files. Is this a valid EPSG coordinate #&gt; system? #&gt; OGR: Corrupt data which is informative, but still needs more backtracking to find the cause than taking things step-by-step in the first instance. Again, mistyping a column name will cause an error: system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32119) %&gt;% select(BIR75) %&gt;% plot(graticule = TRUE, axes = TRUE) #&gt; Error in .f(.x[[i]], ...) : object &#39;BIR75&#39; not found Where do these commands come from? library and system.file are base R. We can ask for help about a particular command by entering e.g. ?library The command read_sf is an alternative to the st_read, which returns a spatial tibble instead of a spatial data frame, and will be discussed in section 1.2. The st_transform method is used here to convert from the geographic coordinates (degrees longitude and latitude) into “flat” coordinates, meaning \\(x\\) and \\(y\\) coordinates in a planar system. It will be discussed in section 8.1. The plot method for sf objects chooses default colors and legends settings; we instructed it to add a graticule (the grey lines of equal longitude and latitude) and degree labels along the axes. It is described in chapter 9. As witnessed by the plot, the plot command receives county polygons as well as BIR74 values for each polygon. How is it possible that we select only the BIR74 variable, but still can plot the polygons? This is because package sf provides a select method: methods(select) #&gt; [1] select.data.frame* select.default* select.grouped_df* #&gt; [4] select.list select.sf* select.tbl_cube* #&gt; see &#39;?methods&#39; for accessing help and source code and this method (select.sf) makes the geometry (geom) sticky: nc %&gt;% select(BIR74) %&gt;% names() #&gt; [1] &quot;BIR74&quot; &quot;geom&quot; In sp, select methods using [ were sticky. We get the “normal” select behaviour if we first coerce to a normal tibble: nc %&gt;% as_tibble(validate = TRUE) %&gt;% select(BIR74) %&gt;% names() #&gt; The `validate` argument to `as_tibble()` is deprecated. Please use `.name_repair` to control column names. #&gt; [1] &quot;BIR74&quot; A ggplot is created when we use geom_sf: ggplot() + geom_sf(data = nc.32119) + aes(fill = BIR74) + theme(panel.grid.major = element_line(color = &quot;white&quot;)) + scale_fill_gradientn(colors = sf.colors(20)) Figure 1.2: first ggplot and a facet plot for a pair of columns in nc.32119 is obtained by gathering the columns: nc.32119 %&gt;% select(SID74, SID79) %&gt;% gather(VAR, SID, -geom) -&gt; nc2 ggplot() + geom_sf(data = nc2, aes(fill = SID)) + facet_wrap(~VAR, ncol = 1) + scale_y_continuous(breaks = 34:36) + scale_fill_gradientn(colors = sf.colors(20)) + theme(panel.grid.major = element_line(color = &quot;white&quot;)) An interactive, leaflet-type map is obtained by suppressPackageStartupMessages(library(mapview)) nc.32119 %&gt;% mapview(zcol = &quot;BIR74&quot;, legend = TRUE, col.regions = sf.colors) 1.2 Reading and writing Typical R data science tasks start with reading data from an external source; this may be a file, or a set of files like a “shapefile”, or a database, or a web service. Package sf can read from a large number of different data source types, each having its own driver. The following commands show how many vector and raster drivers we have available: st_drivers(&quot;vector&quot;) %&gt;% nrow() # vector drivers #&gt; [1] 85 st_drivers(&quot;raster&quot;) %&gt;% nrow() # raster drivers #&gt; [1] 138 (the output you see may differ because of different operating system and configuration; when the same version of GDAL is in use, the drivers available in sf are the same as in rgdal.) 1.2.1 GDAL st_drivers lists the drivers available to GDAL, the geospatial data abstraction library. This library can be seen as the Swiss army knive of spatial data; besides for R it is being used in Python, QGIS, PostGIS, and more than 100 other software projects. The dependency of sf on other R packages and system libraries is shown in figure 1.3. Figure 1.3: sf and its dependencies; arrows indicate strong dependency, dashed arrows weak dependency Note that the C/C++ libraries used (GDAL, GEOS, PROJ, liblwgeom, udunits2) are all developed, maintained and used by data science communities that are large but different from the R community. By using these libraries, we share how we understand what we are doing with these other communities. Because R (and Python) provide interactive interfaces to this software, many R users get closer to these libraries than do users of other software based on these libraries. This is not only important for resolving problems, but also for reaching consensus on which findings are helpful. GDAL is a “library of libraries” – in order to read all these data sources it needs a large number of other libraries. It typically links to over 100 other libraries. Binary packages distributed by CRAN contain only statically linked code: CRAN does not want to make any assumptions about presence of third-party libraries on the host system. As a consequence, when the sf package is installed in binary form from CRAN, it includes a copy of all the required external libraries as well as their dependencies, which may amount to 100 Mb. 1.2.2 st_read or read_sf? The function to read vector data is st_read. Function read_sf is largely the same as `st_read, but chooses a few tidyverse-style defaults: it is silent by default, where st_read gives a short report it returns a spatial tibble instead of a spatial data frame it sets as default stringsAsFactors = FALSE, where st_read listens to the global option default.stringsAsFactors() (which is TRUE by default) it accepts list-columns as input In the same fashion, compared to st_write, function write_sf, is also silent overwrites layers (i.e., sets delete_layer = TRUE) by default, which st_write does not do. 1.2.3 reading and writing raster data Raster data can be read with function read_stars from package stars library(stars) tif = system.file(&quot;tif/L7_ETMs.tif&quot;, package = &quot;stars&quot;) (x = tif %&gt;% read_stars()) #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 1.0 #&gt; 1st Qu.: 54.0 #&gt; Median : 69.0 #&gt; Mean : 68.9 #&gt; 3rd Qu.: 86.0 #&gt; Max. :255.0 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL Plotting this object shows the six different spectral bands read, with color breaks based on quantiles of pixel values accross all bands: plot(x) Similarly, we can write raster data with st_write tif_file = paste0(tempfile(), &quot;.tif&quot;) st_write(x, tif_file) We can read back the raster metadata (its dimensions and reference system, but not the actual pixel values) by read_stars(tif_file, proxy = TRUE) #&gt; stars_proxy object with 1 attribute in file: #&gt; $file62ec22f89123.tif #&gt; [1] &quot;/tmp/RtmpzdxmwG/file62ec22f89123.tif&quot; #&gt; #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL Raster data analysis and its integration with vector data is explained in detail in chapter 4. 1.2.4 Reading from files, and legacy shapefiles We saw above that a spatial dataset can be read from a single file by system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() -&gt; nc In some cases, spatial datasets are contained in multiple files, e.g. in the case of shapefiles. A “shapefile” should be really understood as a set of files with a common prefix, or even a directory with several of such sets. Package sf comes with a couple of shapefiles packaged, a directory listing of the shape directory in the packge is obtained by list.files(system.file(&quot;shape/&quot;, package = &quot;sf&quot;)) #&gt; [1] &quot;nc.dbf&quot; &quot;nc.prj&quot; #&gt; [3] &quot;nc.shp&quot; &quot;nc.shx&quot; #&gt; [5] &quot;olinda1.dbf&quot; &quot;olinda1.prj&quot; #&gt; [7] &quot;olinda1.shp&quot; &quot;olinda1.shx&quot; #&gt; [9] &quot;storms_xyz_feature.dbf&quot; &quot;storms_xyz_feature.shp&quot; #&gt; [11] &quot;storms_xyz_feature.shx&quot; &quot;storms_xyz.dbf&quot; #&gt; [13] &quot;storms_xyz.shp&quot; &quot;storms_xyz.shx&quot; #&gt; [15] &quot;storms_xyzm_feature.dbf&quot; &quot;storms_xyzm_feature.shp&quot; #&gt; [17] &quot;storms_xyzm_feature.shx&quot; &quot;storms_xyzm.dbf&quot; #&gt; [19] &quot;storms_xyzm.shp&quot; &quot;storms_xyzm.shx&quot; We can read a single shapefile by system.file(&quot;shape/nc.shp&quot;, package=&quot;sf&quot;) %&gt;% read_sf() -&gt; nc and it is important to know that in that case all four files starting with nc are read from this directory. We can also read the directory with shapefiles by system.file(&quot;shape&quot;, package=&quot;sf&quot;) %&gt;% read_sf() -&gt; something #&gt; Warning in evalq((function (..., call. = TRUE, immediate. = FALSE, #&gt; noBreaks. = FALSE, : automatically selected the first layer in a data #&gt; source containing more than one. but we see some warnings now, indicating that we are reading only the first layer from a multi-layer dataset (and not nc.shp!). Indeed, this directory contains multiple layers, which can be queried by system.file(&quot;shape&quot;, package=&quot;sf&quot;) %&gt;% st_layers() #&gt; Driver: ESRI Shapefile #&gt; Available layers: #&gt; layer_name geometry_type features fields #&gt; 1 storms_xyzm_feature Measured Line String 71 1 #&gt; 2 storms_xyz 3D Line String 71 0 #&gt; 3 nc Polygon 100 14 #&gt; 4 storms_xyz_feature 3D Line String 71 1 #&gt; 5 olinda1 Polygon 470 6 #&gt; 6 storms_xyzm Measured Line String 71 0 From this list, we could pick one, and use it as the layer argument, as in dataset &lt;- system.file(&quot;shape&quot;, package=&quot;sf&quot;) layer &lt;- &quot;nc&quot; nc &lt;- read_sf(dataset, layer) which is essentially a convoluted way of what we did before to read nc.shp. Considering shapefiles in directories as layers in a dataset is not something that sf came up with, but is the way GDAL handles this. Although it is a good idea in general to give up using shapefiles, we cannot always control the format of the spatial data we get to start with. 1.2.5 Reading from a text string In the special case of a GeoJSON (Butler et al. 2016) dataset, when the dataset is contained in a length-one character vector, it can be directly passed to read_sf and read from memory: str &lt;- &#39;{ &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [102.0, 0.5] }, &quot;properties&quot;: { &quot;prop0&quot;: &quot;value0&quot; } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, &quot;properties&quot;: { &quot;prop0&quot;: &quot;value0&quot;, &quot;prop1&quot;: 0.0 } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, &quot;properties&quot;: { &quot;prop0&quot;: &quot;value0&quot;, &quot;prop1&quot;: { &quot;this&quot;: &quot;that&quot; } } } ] }&#39; (sf_obj &lt;- read_sf(str)) #&gt; Simple feature collection with 3 features and 2 fields #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 100 ymin: 0 xmax: 105 ymax: 1 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; # A tibble: 3 x 3 #&gt; prop0 prop1 geometry #&gt; &lt;chr&gt; &lt;chr&gt; &lt;GEOMETRY [°]&gt; #&gt; 1 value0 &lt;NA&gt; POINT (102 0.5) #&gt; 2 value0 0.0 LINESTRING (102 0, 103 1, 104 0, 105 1) #&gt; 3 value0 &quot;{ \\&quot;this\\&quot;: \\&quot;that\\&quot;… POLYGON ((100 0, 101 0, 101 1, 100 1, 100 … 1.2.6 Database Data can be read from a spatial database directly through two paths. The first is to use the standard database interface of R (DBI), for instance with a SQLITE database: library(RSQLite) db = system.file(&quot;sqlite/meuse.sqlite&quot;, package = &quot;sf&quot;) dbcon &lt;- dbConnect(dbDriver(&quot;SQLite&quot;), db) (s = st_read(dbcon, &quot;meuse.sqlite&quot;))[1:3,] #&gt; Simple feature collection with 3 features and 13 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 181000 ymin: 334000 xmax: 181000 ymax: 334000 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; ogc_fid cadmium copper lead zinc elev dist om ffreq soil lime #&gt; 1 1 11.7 85 299 1022 7.91 0.00136 13.6 1 1 1 #&gt; 2 2 8.6 81 277 1141 6.98 0.01222 14.0 1 1 1 #&gt; 3 3 6.5 68 199 640 7.80 0.10303 13.0 1 1 1 #&gt; landuse dist.m GEOMETRY #&gt; 1 Ah 50 POINT (181072 333611) #&gt; 2 Ah 30 POINT (181025 333558) #&gt; 3 Ah 150 POINT (181165 333537) dbDisconnect(dbcon) Another way is to use GDAL database drivers, e.g. by st_read(db)[1:3,] #&gt; Reading layer `meuse.sqlite&#39; from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.5/sf/sqlite/meuse.sqlite&#39; using driver `SQLite&#39; #&gt; Simple feature collection with 155 features and 12 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 179000 ymin: 330000 xmax: 181000 ymax: 334000 #&gt; epsg (SRID): 28992 #&gt; proj4string: +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.4171,50.3319,465.5524,-0.398957,0.343988,-1.87740,4.0725 +units=m +no_defs #&gt; Simple feature collection with 3 features and 12 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 181000 ymin: 334000 xmax: 181000 ymax: 334000 #&gt; epsg (SRID): 28992 #&gt; proj4string: +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.4171,50.3319,465.5524,-0.398957,0.343988,-1.87740,4.0725 +units=m +no_defs #&gt; cadmium copper lead zinc elev dist om ffreq soil lime landuse #&gt; 1 11.7 85 299 1022 7.91 0.00136 13.6 1 1 1 Ah #&gt; 2 8.6 81 277 1141 6.98 0.01222 14.0 1 1 1 Ah #&gt; 3 6.5 68 199 640 7.80 0.10303 13.0 1 1 1 Ah #&gt; dist.m GEOMETRY #&gt; 1 50 POINT (181072 333611) #&gt; 2 30 POINT (181025 333558) #&gt; 3 150 POINT (181165 333537) An advantage of the former approach may be that any query can be passed, allowing for reading only parts of a table into R’s memory. 1.3 Exercises Read the shapefile storms_xyz_feature from the shape directory in the sf package Copy this file to another directory on your computer, and read it from there (note: a shapefile consists of more than one file!) How many features does this dataset contain? Plot the dataset, with axes = TRUE (hint: before plotting, pipe through st_zm to drop Z and M coordinates; more about this in chapter 3). Before plotting, pipe the dataset through st_set_crs(4326). What is different in the plot obtained? References "],
["cs.html", "Chapter 2 Coordinate systems 2.1 Cartesian and geodetic coordinates 2.2 Ellipsoidal coordinates 2.3 Distances 2.4 Bounded spaces 2.5 Time 2.6 Exercises", " Chapter 2 Coordinate systems For spatial data, the location of observations are characterised by coordinates, and coordinates are defined in a coordinate system. Different coordinate systems can be used for this, and the most important difference is whether coordinates are defined over a 2-dimensional or 3-dimensional space referenced to orthogonal axes (Cartesian coordinates), or using distance and directions (polar coordinates, spherical coordinates). Figure 2.1: Two-dimensional polar (red) and Cartesian (blue) coordinates 2.1 Cartesian and geodetic coordinates Figure 2.1 shows both polar and Cartesian coordinates for a standard two-dimensional situation. In Cartesian coordinates, the point shown is \\((x,y) = (3,4)\\), for polar coordinates it is \\((r,\\phi) = (5, \\mbox{arctan}(4/3))\\), where \\(\\mbox{arctan}(4/3)\\) is approximately \\(0.93\\) radians, or \\(53^{\\circ}\\). Note that \\(x\\), \\(y\\) and \\(r\\) all have length units, where \\(\\phi\\) is an angle (a unitless length/length ratio). Converting back and forth between Cartesian and polar coordinates is trivial, \\[x = r~\\mbox{cos} \\phi\\] \\[y = r~\\mbox{sin} \\phi\\] \\[\\phi = \\mbox{arctan}(y/x)\\] \\[r = \\sqrt{x^2 + y^2}\\] but requires care with using the right quadrant for \\(\\mbox{arctan}\\); the atan2 function is helpful here. 2.2 Ellipsoidal coordinates In three dimensions, where Cartesian coordinates are expressed as \\((x,y,z)\\), spherical coordinates are the three-dimensional equivalent of polar coordinates and can be expressed as \\((r,\\lambda,\\phi)\\), where \\(r\\) is the radius of the sphere, \\(\\lambda\\) is the longitude, measured in the \\((x,y)\\) plane counter-clockwise from positive \\(x\\), and \\(\\phi\\) is the latitude, the angle between the vector and the \\((x,y)\\) plane. \\(\\lambda\\) typically varies between \\(-180^{\\circ}\\) and \\(180^{\\circ}\\) (or alternatively from \\(0^{\\circ}\\) to \\(360^{\\circ}\\)), \\(\\phi\\) from \\(-90^{\\circ}\\) to \\(90^{\\circ}\\). When we are only interested in points on a sphere with given radius, we can drop \\(r\\): \\((\\lambda,\\phi)\\) now suffice to identify any point. It should be noted that this is just a definition, one could for instance also choose to measure polar angle, i.e. the angle between the vector and \\(z\\), instead of latitude. There is also a long tradition of specifying points as \\((\\phi,\\lambda)\\) but throughout this book we will stick to longitude-latitude, \\((\\lambda,\\phi)\\). For points on an ellipse, there are two ways in which angle can be expressed (figure 2.2): measured from the center of the ellipse (\\(\\psi\\)), or measured perpendicular to the tangent on the ellipse at the target point (\\(\\phi\\)). Figure 2.2: Angles on an ellipse: geodetic (blue) and geocentric (red) latitude The most commonly used parametric model for the Earth is an ellipsoid of revolution, an ellipsoid with two equal semi-axes (Iliffe and Lott 2008). In effect, this is a flattened sphere (or spheroid): the distance between the poles is (slightly: about 0.33%) smaller than the distance between two opposite points on the equator. Under this model, longitude is always measured along a circle, but latitude along an ellipse. If we think of figure 2.2 as a cross section of the Earth passing through the poles, the latitude measure \\(\\phi\\) is the one used when no further specification is given; it is also called geodetic latitude. The latitude measure \\(\\psi\\) is called the geocentric latitude. In addition to longitude and latitude we can add altitude to define points that are not on the spheroid, and obtain a three dimensional space again. When defining altitude, we need to choose where zero altitude is: on the ellipsoid, or relative to the surface approximating mean sea level (the geoid)? which direction is positive, and which direction is “straight up”: perpendicular to the spheroid surface, or in the direction perpendicular to the surface of the geoid? All these choices may matter, depending on the application area. 2.3 Distances Distances between two points \\(p_i\\) and \\(p_j\\) in Cartesian coordinates are computed as Euclidian distances, in two dimensions by \\[d_{ij} = \\sqrt{(x_i-x_j)^2+(y_i-y_j)^2}\\] with \\(p_i = (x_i,y_i)\\) and in three dimensions by \\[d_{ij} = \\sqrt{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}\\] with \\(p_i = (x_i,y_i,z_i).\\) These distances represent the length of a straight line between two points \\(i\\) and \\(j\\). For two points on a circle, the length of the arc of two points \\(c_1 = (r,{\\phi}_i)\\) and \\(c_2 = (r, \\phi_2)\\) is \\[s_{ij}=r~|\\phi_1-\\phi_2| = r ~\\theta\\] with \\(\\theta\\) the angle between \\(\\phi_1\\) and \\(\\phi_2\\) in radians. For very small values of \\(\\theta\\), we will have \\(s_{ij} \\approx d_{ij}\\). For two points \\(p_1 = (\\lambda_1,\\phi_1)\\) and \\(p_2 = (\\lambda_2,\\phi_2)\\) on a sphere with radius \\(r&#39;\\), the great circle distance is the arc length between \\(p_1\\) and \\(p_2\\) on the circle that passes through \\(p_1\\) and \\(p_2\\) and has the center of the sphere as its center, and is given by \\(s_{12} = r ~ \\theta_{12}\\) with \\[\\theta_{12} = \\arccos(\\sin \\phi_1 \\cdot \\sin \\phi_2 + \\cos \\phi_1 \\cdot \\cos \\phi_2 \\cdot \\cos(|\\lambda_1-\\lambda_2|))\\] the angle between \\(p_1\\) and \\(p_2\\), in radians. Arc distances between two points on a spheroid are more complicated to compute. Details about the computation method used in package lwgeom (which, in turn, is used by package sf) are given in Karney (2013). 2.4 Bounded spaces All the above assumes pure geometric computations in spaces where there are no unexpected obstructions. When we move through space on a daily basis, we typically find constraints e.g. when we walk through a building when we cycle to work or when we drive to a shop. Distances, in such case, can be made up of a sequence of shortest (straight line or great circle) distances, but follow a more complex path than a straight line. Typical constraints come from road networks, or from the requirement for a certain habitat for movement (water for fish, forest for certain bird species). 2.5 Time When we describe over which “space” a certain phenomenon is characterised, time forms an integral component: nothing exists forever. It is tempting to think that compared to geographical “space”, time is one-dimensional “linear”, and that is often the way we address time, e.g. in R where Date is represented by the number of days since 1970-01-01 (d = as.Date(&quot;1970-02-01&quot;)) #&gt; [1] &quot;1970-02-01&quot; as.numeric(d) #&gt; [1] 31 and POSIXt time by the number of seconds since the start of that date (t = as.POSIXct(&quot;1970-01-02 00:00&quot;, tz = &quot;UTC&quot;)) #&gt; [1] &quot;1970-01-02 UTC&quot; as.numeric(t) #&gt; [1] 86400 In practical cases however, we may be interested in how certain phenomena vary over the day, or over the year, in which case it may be more convenient to represent time as the tuple (year, day-of-year), or (day, time-of-day). When we study for instance traffic patterns, day of week plays a role, in which we may end up with (year, week-of-year, day-of-week, time-of-day) in order to quantify hourly, dayly, weekly, and yearly signals. This decomposes time essentially in two or more components, with some of them having a cyclic character. 2.6 Exercises convert the \\((x,y)\\) points \\((10,2)\\), \\((-10,-2)\\), \\((10,-2)\\) and \\((0,10)\\) to polar coordinates convert the polar \\((r,\\phi)\\) points \\((10,45^{\\circ})\\), \\((0,100^{\\circ})\\) and \\((5,359^{\\circ})\\) to Cartesian coordinates assuming the Earth is a sphere with a radius of 6371 km, compute for \\((\\lambda,\\phi)\\) points the great circle distance between \\((10,10)\\) and \\((11,10)\\), between \\((10,80)\\) and \\((11,80)\\), between \\((10,10)\\) and \\((10,11)\\) and between \\((10,80)\\) and \\((10,81)\\) (units: degree). What are the distance units? References "],
["geometries.html", "Chapter 3 Geometries 3.1 Simple feature geometry types 3.2 Simple features in sf 3.3 Tesselations: coverages, rasters 3.4 Networks 3.5 Geometries on the sphere", " Chapter 3 Geometries Having learned how we describe spaces, we can define how geometries can be described in these space. This chapter will mostly explain the geometries for simple features, and introduce the three classes sfg, sfc and sf for single geometries, geometry sets, and geometry sets with associated attributes. 3.1 Simple feature geometry types Simple feature geometries are a way to describe the geometries of features. By features we mean things that have a geometry, some time properties, and other attributes. The main application of simple feature geometries is to describe two-dimensional geometries by points, lines, or polygons. The “simple” adjective refers to the fact that the line or polygon geometries are represented by sequences of points connected with straight lines. Simple features access is a standard (Herring 2011, Herring (2010), ISO (2004)) for describing simple feature geometries that includes a class hierarchy a set of operations binary and text encodings We will now discuss the seven most common simple feature geometry types. Although in practice we will most often import spatial data from external sources (files, databases, web services), we will create them here from scratch using simple constructor functions. 3.1.1 The big seven The most commonly used simple features geometries, used to represent a single feature are: type description POINT single point geometry MULTIPOINT set of points LINESTRING single linestring (two or more points connected by straight lines) MULTILINESTRING set of linestrings POLYGON exterior ring with zero or more inner rings, denoting holes MULTIPOLYGON set of polygons GEOMETRYCOLLECTION set of the geometries above Points in a geometry contain at least two coordinates: x and y, in that order. 3.1.2 Valid geometries Valid geometries obey the following properties: linestrings shall not self-intersect polygon rings shall be closed (the last point equals the first) polygon holes (inner rings) shall be inside their exterior ring polygon inner rings shall maximally touch the exterior ring in single points, not over a line a polygon ring shall not repeat its own path If this is not the case, the geometry concerned is not valid. 3.1.3 Z and M In addition to X and Y coordinates, Single points (vertices) of simple feature geometries can have a Z coordinate, denoting altitude, and/or an M value, denoting some “measure” The M attribute shall be a property of the vertex. It sounds attractive to encode a time stamp in it, e.g. to pack trajectories in LINESTRINGs. These become however invalid once the trajectory self-intersects. Both Z and M are found relatively rarely, and software support to do something useful with them is (still) rather rare. 3.1.4 Ten further geometry types There are 10 more geometry types which are more rare, but increasingly find implementation: type description CIRCULARSTRING The CIRCULARSTRING is the basic curve type, similar to a LINESTRING in the linear world. A single segment requires three points, the start and end points (first and third) and any other point on the arc. The exception to this is for a closed circle, where the start and end points are the same. In this case the second point MUST be the center of the arc, ie the opposite side of the circle. To chain arcs together, the last point of the previous arc becomes the first point of the next arc, just like in LINESTRING. This means that a valid circular string must have an odd number of points greated than 1. COMPOUNDCURVE A compound curve is a single, continuous curve that has both curved (circular) segments and linear segments. That means that in addition to having well-formed components, the end point of every component (except the last) must be coincident with the start point of the following component. CURVEPOLYGON Example compound curve in a curve polygon: CURVEPOLYGON(COMPOUNDCURVE(CIRCULARSTRING(0 0,2 0, 2 1, 2 3, 4 3),(4 3, 4 5, 1 4, 0 0)), CIRCULARSTRING(1.7 1, 1.4 0.4, 1.6 0.4, 1.6 0.5, 1.7 1) ) MULTICURVE A MultiCurve is a 1-dimensional GeometryCollection whose elements are Curves, it can include linear strings, circular strings or compound strings. MULTISURFACE A MultiSurface is a 2-dimensional GeometryCollection whose elements are Surfaces, all using coordinates from the same coordinate reference system. CURVE A Curve is a 1-dimensional geometric object usually stored as a sequence of Points, with the subtype of Curve specifying the form of the interpolation between Points SURFACE A Surface is a 2-dimensional geometric object POLYHEDRALSURFACE A PolyhedralSurface is a contiguous collection of polygons, which share common boundary segments TIN A TIN (triangulated irregular network) is a PolyhedralSurface consisting only of Triangle patches. TRIANGLE A Triangle is a polygon with 3 distinct, non-collinear vertices and no interior boundary Note that CIRCULASTRING, COMPOUNDCURVE and CURVEPOLYGON are not described in the SFA standard, but in the SQL-MM part 3 standard. The descriptions above were copied from the PostGIS manual. 3.1.5 Encodings Part of the simple feature standard are two encodings: a text and a binary encoding. The text strings POINT (0 1) and so on indicate text encodings, also known as well-known text (WKT) encodings, of simple feature geometries. They are meant to be human-readable. 3.2 Simple features in sf This section describes the implementation of simple feature geometries in package sf. It will first explain how single simple feature geometries, explained in the previous section, are represented in R objects of class sfg. Next, it will explain how sets of simple feature geometry objects are collected in a list of class sfc. This list acts as a geometry list-column in data.frame objects, of class sf. 3.2.1 sfg: simple feature geometry Point sets are stored as numeric matrix, with 2 (XY), 3 (XYZ or XYM) or 4 (XYZM) columns, with a points in each row. Individual simple feature geometry objects are implemented as: numeric vector for POINT, numeric matrix for MULTIPOINT and LINESTRING list of numeric matrices for MULTILINESTRING and POLYGON list of lists of numeric matrices for MULTIPOLYGON list of (typed) geometries for GEOMETRYCOLLECTION All other geometry types follow this, using the simplest possible option. Note that matrices can have zero points, and lists can have zero elements, in which case we have empty geometries; more about this in section 3.2.1.2. Objects have a class indicating their dimension, type, and a superclass (sfg: simple feature geometry), and have no other attributes than their S3 class: (pt = st_point(c(0,1))) #&gt; POINT (0 1) attributes(pt) #&gt; $class #&gt; [1] &quot;XY&quot; &quot;POINT&quot; &quot;sfg&quot; We see that in addition to sfg the class attribute has two values: XY telling the dimension of the point(s), can also be XYZ, XYM or XYZM POINT revealing the geometry type. Examples of XYZ and XYM and XYZM geometries are found here: system.file(&quot;shape/storms_xyz_feature.shp&quot;, package=&quot;sf&quot;) %&gt;% st_read() #&gt; Reading layer `storms_xyz_feature&#39; from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.5/sf/shape/storms_xyz_feature.shp&#39; using driver `ESRI Shapefile&#39; #&gt; Simple feature collection with 71 features and 1 field #&gt; geometry type: LINESTRING #&gt; dimension: XYZ #&gt; bbox: xmin: -102 ymin: 8.3 xmax: 0 ymax: 59.5 #&gt; epsg (SRID): NA #&gt; proj4string: NA system.file(&quot;shape/storms_xyzm_feature.shp&quot;, package=&quot;sf&quot;) %&gt;% # badly named! st_read() #&gt; Reading layer `storms_xyzm_feature&#39; from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.5/sf/shape/storms_xyzm_feature.shp&#39; using driver `ESRI Shapefile&#39; #&gt; Simple feature collection with 71 features and 1 field #&gt; geometry type: LINESTRING #&gt; dimension: XYM #&gt; bbox: xmin: -102 ymin: 8.3 xmax: 0 ymax: 59.5 #&gt; epsg (SRID): NA #&gt; proj4string: NA (pzm = st_point(c(1,2,3,4))) #&gt; POINT ZM (1 2 3 4) A MULTIPOINT or a LINESTRING can be created by a matrix (m1 = rbind(c(8, 1), c(2, 5), c(3, 2))) #&gt; [,1] [,2] #&gt; [1,] 8 1 #&gt; [2,] 2 5 #&gt; [3,] 3 2 (mp = st_multipoint(m1)) #&gt; MULTIPOINT (8 1, 2 5, 3 2) (ls = st_linestring(m1)) #&gt; LINESTRING (8 1, 2 5, 3 2) Although these geometries contain the same points, they have entirely different meaning: the point set is a zero-dimensional, the line a one-dimensional geometry: st_dimension(mp) #&gt; [1] 0 st_dimension(ls) #&gt; [1] 1 A MULTILINESTRING can be constructed from a list of matrices, representing vertices: m2 = rbind(c(22,20), c(18, 15)) (mls = st_multilinestring(list(m1, m2))) #&gt; MULTILINESTRING ((8 1, 2 5, 3 2), (22 20, 18 15)) A POLYGON consists of an outer ring, followed by zero or more inner rings that denote holes in the outer ring: (ring1 = rbind(c(0,0), c(4,0), c(4,4), c(0,4), c(0,0))) #&gt; [,1] [,2] #&gt; [1,] 0 0 #&gt; [2,] 4 0 #&gt; [3,] 4 4 #&gt; [4,] 0 4 #&gt; [5,] 0 0 (p1 = st_polygon(list(ring1))) #&gt; POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) (ring2 = ring1 + 5) #&gt; [,1] [,2] #&gt; [1,] 5 5 #&gt; [2,] 9 5 #&gt; [3,] 9 9 #&gt; [4,] 5 9 #&gt; [5,] 5 5 (ring3 = (ring1[5:1,] / 4) + 6) #&gt; [,1] [,2] #&gt; [1,] 6 6 #&gt; [2,] 6 7 #&gt; [3,] 7 7 #&gt; [4,] 7 6 #&gt; [5,] 6 6 (p2 = st_polygon(list(ring2, ring3))) #&gt; POLYGON ((5 5, 9 5, 9 9, 5 9, 5 5), (6 6, 6 7, 7 7, 7 6, 6 6)) A MULTIPOLYGON can be constructed as a list of lists of matrices: (mpol = st_multipolygon(list(list(ring1), list(ring2, ring3)))) #&gt; MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0)), ((5 5, 9 5, 9 9, 5 9, 5 5), (6 6, 6 7, 7 7, 7 6, 6 6))) And finally, a GEOMETRYCOLLECTION can be constructed from a list of typed geometries: st_geometrycollection(list(pt, mp, ls, mpol)) #&gt; GEOMETRYCOLLECTION (POINT (0 1), MULTIPOINT (8 1, 2 5, 3 2), LINESTRING (8 1, 2 5, 3 2), MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0)), ((5 5, 9 5, 9 9, 5 9, 5 5), (6 6, 6 7, 7 7, 7 6, 6 6)))) 3.2.1.1 WKT, WKB encodings By default, package sf prints the same number of digits as R, but this can be manipulated: st_point(c(1/3, 2/3)) #&gt; POINT (0.333 0.667) print(st_point(c(1/3, 2/3)), digits = 16) #&gt; POINT (0.3333333333333333 0.6666666666666666) print(st_point(c(1/3, 2/3)), digits = 3) #&gt; POINT (0.333 0.667) An encoding that is more useful for machine-to-machine communication is well-known binary. An example of a round-trip R \\(\\rightarrow\\) binary \\(\\rightarrow\\) R is (wkb = st_as_binary(st_point(c(1/3, 2/3)))) #&gt; [1] 01 01 00 00 00 55 55 55 55 55 55 d5 3f 55 55 55 55 55 55 e5 3f st_as_sfc(wkb)[[1]] #&gt; POINT (0.333 0.667) Object r is a raw vector, which is little useful in R. Binary conversion is used to communicate geometries to external libraries (GDAL, GEOS, liblwgeom) and spatial databases because it is fast and lossless. Whenever there is a choice, binary encoding should be prefered over text encoding. 3.2.1.2 simple, valid, empty Methods st_is_simple and st_is_valid help detect non-simple and non-valid geometries: st_is_simple(st_linestring(rbind(c(0,0), c(1,1), c(1,0), c(0,1)))) # self-intersects #&gt; [1] FALSE st_is_valid(st_polygon(list(rbind(c(1,1), c(0,0), c(1,1), c(2,2), c(2,1), c(1,1))))) # repeats #&gt; [1] FALSE A very important concept in the feature geometry framework is that of the empty geometry. We can think of an empty geometry as similar to the NA value in R vectors: it is a placeholder, but a usable value is not available. Empty geometries arise naturally when we do geometrical operations (chapter 5), for instance when we want to know where two disjoint geometries coincide: (e = st_intersection(st_point(c(0,0)), st_point(c(1,1)))) #&gt; GEOMETRYCOLLECTION EMPTY It is not entirely clear what the benefit is of having typed empty geometries, but according to the simple feature standard they are. They are detected by st_is_empty(e) #&gt; [1] TRUE 3.2.1.3 Conversion between geometry types Up to the extent that a conversion is feasible, we can convert simple feature geometries using the st_cast generic: methods(st_cast) #&gt; [1] st_cast.CIRCULARSTRING* st_cast.COMPOUNDCURVE* #&gt; [3] st_cast.CURVE* st_cast.GEOMETRYCOLLECTION* #&gt; [5] st_cast.LINESTRING* st_cast.MULTILINESTRING* #&gt; [7] st_cast.MULTIPOINT* st_cast.MULTIPOLYGON* #&gt; [9] st_cast.MULTISURFACE* st_cast.POINT* #&gt; [11] st_cast.POLYGON* st_cast.sf* #&gt; [13] st_cast.sfc* st_cast.sfc_CIRCULARSTRING* #&gt; see &#39;?methods&#39; for accessing help and source code Conversion is required e.g. to be able to plot curved geometries. CURVE, COMPOUNDCURVE and CIRCULARSTRING have st_cast methods to cast them to LINESTRING; MULTISURFACE has an st_cast method to MULTIPOLYGON. An example, needed for plotting, is (ls &lt;- st_as_sfc(&quot;CIRCULARSTRING(0 0,1 0,1 1)&quot;) %&gt;% st_cast(&quot;LINESTRING&quot;)) #&gt; Geometry set for 1 feature #&gt; geometry type: LINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: -0.207 xmax: 1.21 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; LINESTRING (0 0, 0.0361 -0.0337, 0.0745 -0.0647... plot(ls, axes = TRUE) It is convenient in other cases to analyse the point pattern from a set of vertices in a linestring. However, rbind(c(0,0), c(1,1), c(1,0), c(0,1)) %&gt;% st_linestring() %&gt;% st_cast(&quot;POINT&quot;) #&gt; Warning in st_cast.LINESTRING(., &quot;POINT&quot;): point from first coordinate only #&gt; POINT (0 0) does not what we expect, because it will convert a single geometry into a new single geometry. We can convert to a MULTIPOINT rbind(c(0,0), c(1,1), c(1,0), c(0,1)) %&gt;% st_linestring() %&gt;% st_cast(&quot;POINT&quot;) #&gt; Warning in st_cast.LINESTRING(., &quot;POINT&quot;): point from first coordinate only #&gt; POINT (0 0) but if we want to have a set of points, we need to work with sets (section 3.2.2) first, because we want a set with another cardinality: (p &lt;- rbind(c(0,0), c(1,1), c(1,0), c(0,1)) %&gt;% st_linestring() %&gt;% st_sfc() %&gt;% st_cast(&quot;POINT&quot;)) #&gt; Geometry set for 4 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT (0 0) #&gt; POINT (1 1) #&gt; POINT (1 0) #&gt; POINT (0 1) 3.2.1.4 GEOMETRYCOLLECTION handling Single features can have a geometry that consists of several subgeometries of different type, held in a GEOMETRYCOLLECTION. This may sound like looking for trouble, but these arise rather naturally when looking for intersections. For instance, the intersection of two LINESTRING geometries may be the combination of a LINESTRING and a POINT. Putting this intersection into a single feature geometry needs a GEOMETRYCOLLECTION. In case we end up with GEOMETRYCOLLECTION objects, the next question is often what to do with them. One thing we can do is extract elements from them: pt &lt;- st_point(c(1, 0)) ls &lt;- st_linestring(matrix(c(4, 3, 0, 0), ncol = 2)) poly1 &lt;- st_polygon(list(matrix(c(5.5, 7, 7, 6, 5.5, 0, 0, -0.5, -0.5, 0), ncol = 2))) poly2 &lt;- st_polygon(list(matrix(c(6.6, 8, 8, 7, 6.6, 1, 1, 1.5, 1.5, 1), ncol = 2))) multipoly &lt;- st_multipolygon(list(poly1, poly2)) j &lt;- st_geometrycollection(list(pt, ls, poly1, poly2, multipoly)) st_collection_extract(j, &quot;POLYGON&quot;) #&gt; Geometry set for 3 features #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 5.5 ymin: -0.5 xmax: 8 ymax: 1.5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTIPOLYGON (((5.5 0, 7 0, 7 -0.5, 6 -0.5, 5.5... #&gt; MULTIPOLYGON (((6.6 1, 8 1, 8 1.5, 7 1.5, 6.6 1))) #&gt; MULTIPOLYGON (((5.5 0, 7 0, 7 -0.5, 6 -0.5, 5.5... st_collection_extract(j, &quot;POINT&quot;) #&gt; POINT (1 0) st_collection_extract(j, &quot;LINESTRING&quot;) #&gt; LINESTRING (4 0, 3 0) which sometimes results in a geometry set, sometimes in single geometries. 3.2.2 sfc: sets of geometries Rather than handling geometries individually, we typically handle them as sets. Package sf provides a dedicated class for this, called sfc (for simple feature geometry list column). We can create such a list column with constructor function st_sfc: (sfc = st_sfc(st_point(c(0,1)), st_point(c(-3,2)), crs = 4326)) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: -3 ymin: 1 xmax: 0 ymax: 2 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POINT (0 1) #&gt; POINT (-3 2) The default report from the print method for sfc gives the number of features geometries the feature geometry type (here: POINT) the feature geometry dimension (here: XY) the bounding box for the set the coordinate reference system for the set (epsg and proj4string: see chapter 7.3) the first few geometries, as (abbreviated) WKT The class of the geometry list-column, class(sfc) #&gt; [1] &quot;sfc_POINT&quot; &quot;sfc&quot; is again a combination of a specific class, and a superclass. In addition to a class, the object has further attributes attributes(sfc) %&gt;% names() %&gt;% setdiff(&quot;class&quot;) #&gt; [1] &quot;precision&quot; &quot;bbox&quot; &quot;crs&quot; &quot;n_empty&quot; which are used to record for the whole set: a precision value (section 5.4) the bounding box enclosing all geometries (for x and y) a coordinate reference system (section 7.3) the number of empty geometries contained in the set This means that all these properties are defined for the set, and not for geometries individually. As we’ve seen above, sets of geometries arise when we tear apart compound geometries, as in (p &lt;- rbind(c(0,0), c(1,1), c(1,0), c(0,1)) %&gt;% st_linestring() %&gt;% st_sfc() %&gt;% st_cast(&quot;POINT&quot;)) #&gt; Geometry set for 4 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT (0 0) #&gt; POINT (1 1) #&gt; POINT (1 0) #&gt; POINT (0 1) Here, st_sfc creates a set of one LINESTRING, and the resulting set has size 4: length(p) #&gt; [1] 4 Going the other way around, we need st_combine to combine geometries into one: p %&gt;% st_combine #&gt; Geometry set for 1 feature #&gt; geometry type: MULTIPOINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTIPOINT (0 0, 1 1, 1 0, 0 1) p %&gt;% st_combine %&gt;% st_cast(&quot;LINESTRING&quot;) #&gt; Geometry set for 1 feature #&gt; geometry type: LINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; LINESTRING (0 0, 1 1, 1 0, 0 1) More general, in practice we will almost always work with sets of geometries, because in spatial data we typically associate an observation with a feature, which has a geometry, and we work with sets of observations. sfc objects are lists with each entry being an sfg object: p[[2]] #&gt; POINT (1 1) and we will use these lists as list columns in data.frame or tibble objects to represent simple features with geometries in a list column. These objects are of class sf (section 3.2.3). 3.2.2.1 Feature sets with mixed geometries Sets of simple features also consist of features with heterogeneous geometries. In this case, the geometry type of the set is GEOMETRY: (g = st_sfc(st_point(c(0,0)), st_linestring(rbind(c(0,0), c(1,1))))) #&gt; Geometry set for 2 features #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT (0 0) #&gt; LINESTRING (0 0, 1 1) These can be filtered by using st_is g %&gt;% st_is(&quot;LINESTRING&quot;) #&gt; [1] FALSE TRUE or, when working with sf objects, st_sf(g) %&gt;% filter(st_is(., &quot;LINESTRING&quot;)) #&gt; Simple feature collection with 1 feature and 0 fields #&gt; geometry type: LINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; g #&gt; 1 LINESTRING (0 0, 1 1) 3.2.3 sf: geometries with attributes sf objects are tibble or data.frame objects with feature geometries in a list column, and an sf class added: sf = st_sf(sfc) class(sf) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; Although there is nothing against simply using data.frames or tibbles with sfc list columns, a number of methods have been written for sf objects that make life even more convenient, including plot methods to create maps. In addition to the usual data.frame attributes, sf objects have two more attributes: sf %&gt;% attributes() %&gt;% names() %&gt;% setdiff(c(&quot;row.names&quot;, &quot;class&quot;, &quot;names&quot;)) #&gt; [1] &quot;sf_column&quot; &quot;agr&quot; They are: sf_column: a length one character vector with the name of the (active) geometry list-column. Note that sf objects may contain multiple geometry list-columns, but the one named here is used for all operations, as the “active” geometry. agr: attribute-geometry relationships; this encodes for each of the attributes how it relates to the geometry (in case of a non-point geometry): is it constant throughout the geometry like a soil type, is it an aggregate over the geometry like a population count, or does it identify the geometry like a state name? This is explained in more depth in section 6.1. 3.3 Tesselations: coverages, rasters A common case in spatial data analysis is that an area is split (tesselated) in a number of non-overlapping regions. Although this can be modelled by a sequence of simple feature geometries (polygons), it is hard to guarantee for a set of simple feature polygons that they overlap nowhere, or that there are no gaps between them. More fundamental ways of storing such polygons use a topological model, examples of this are found in geographic information systems like GRASS GIS or ArcGIS. Topological models store every boundary between polygons only once, and register which polygon is on either side of a boundary. A simpler approach, associated with the term raster data, is to tesselate each spatial dimension \\(d\\) into regular cells, formed e.g. by left-closed and right-open intervals \\(d_i\\): \\[\\begin{equation} d_i = d_0 + [~ i \\cdot \\delta, (i+1) \\cdot \\delta~) \\end{equation}\\] with \\(d_0\\) an offset, \\(\\delta\\) the interval (cell or pixel) size, and where the cell index \\(i\\) is an arbitrary but consecutive set of integers. The \\(\\delta\\) value is often taken negative for the \\(y\\)-axis (Northing), indicating that raster row numbers increasing Southwards correspond to \\(y\\)-coordinates increasing Northwards. In arbitrary polygon tesselations, assigning points to polygons when they fall on a boundary shared by two polygons is ambiguous. Using left-closed “[” and right-open “)” intervals in regular tesselations removes this ambiguity. Tesselating the time dimension in this way is very common, and reflects the implicit assumption underlying time series packages such as xts in R. Different models can be combined: one could use simple feature polygons to tesselate space, and combine this with a regular tesselation of time in order to cover a space-time vector datacube. Raster data and data cubes are discussed in chapter 4. 3.4 Networks Spatial networks are typically composed of linear (LINESTRING) elements, but possess further topological properties describing the network coherence: start and endpoints of a linestring may be connected to other linestring start or end points, forming a set of nodes and edges edges may be directed, and allow for connections (flow, transport) in only one way. Several R packages (osmar, stplanr) have (limited) functionality available for constructing network objects, and working with them, e.g. computing shortest or fastest routes through a network. 3.5 Geometries on the sphere Geometries on the sphere are geometries made from geodetic coordinates. The easiest of these concern small regions near the equator not covering the date line, because in that case we can ignore all problems and still do a good job. Reality is nastier. The concept of a bounding box, defined from the coordinate ranges breaks easily down, e.g. when crossing the date line: pts = rbind(c(-179,0), c(179,0), c(179,1), c(-179,1), c(-179,0)) date_line = st_sfc(st_polygon(list(pts)), crs = 4326) st_bbox(date_line) %&gt;% st_as_sfc() #&gt; Geometry set for 1 feature #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: -179 ymin: 0 xmax: 179 ymax: 1 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POLYGON ((-179 0, 179 0, 179 1, -179 1, -179 0)) or when a polygon contains one of the poles: pts = rbind(c(0,89), c(120,89), c(240,89), c(0,89)) pole = st_sfc(st_polygon(list(pts)), crs = 4326) st_bbox(pole) %&gt;% st_as_sfc() #&gt; Geometry set for 1 feature #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 89 xmax: 240 ymax: 89 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POLYGON ((0 89, 240 89, 240 89, 0 89, 0 89)) where we see that in both cases the st_bbox implied polygon does not cover the area intended. 3.5.1 Straight lines? The simple feature model assumes that linestrings and polygons are formed of points connected by straight lines. When however representing the Earth surface, what does a straight line mean? The simple feature standard does not help much, here: it assumes Cartesian space. Technically speaking, a straight line between two points on a sphere exists, but it crosses the sphere, which is not very practical in most cases. The most common case is to use great circle segments to connect points: the shortest path that follows the surface of the sphere or ellipsoid. This means that (with longitude latitude coordinates) the line between POINT(0 50) and POINT(10 50) does not cross POINT(5 50). It also means that the line between points on opposite sides of the sphere is ambiguous. Also, the direction of a great circle segment, when defined as the angle it has with meridians, is not constant. 3.5.2 Ring direction for polygons The simple feature standard is not conclusive about the direction of points in a ring. It points out that exterior rings should be counter clockwise, when seen from above, and interior rings (holes) clockwise, but for instance st_is_valid does not invalidate clockwise exterior rings: st_is_valid(st_polygon(list(rbind(c(0,0), c(0,1), c(1,1), c(0,0))))) #&gt; [1] TRUE This may have several reasons: a lot of data may come with wrong ring directions, and the distinction between exterior and interior rings is already unambiguous by their order: the first is exterior, anything following is interior. On the sphere, any polygon divides the sphere surface in two finite areas, meaning there is no longer an unambiguous “inside” vs. “outside”: does the polygon with longitude latitude coordinates POLYGON((0 0, 120 0, 240 0, 0 0)) denote the northern or the southern hemisphere? One can still go two directions here: assume that in practice polygons never divide the Earth in two equal halves, and take the smaller area as the “inside” decide strongly about ring direction, e.g. counter-clockwise (following the ring, standing on the Earth, the left-side of the ring denotes the polygon interior) Package sf comes with a large number of functions that work both for projected (Cartesian) data as for data defined in spherical coordinates. Whenever it makes assumptions of Cartesian coordinates for spherical coordinates it emits a warning. This is discussed further in section 5.6. References "],
["raster.html", "Chapter 4 Raster and vector datacubes 4.1 Package stars 4.2 Raster data 4.3 Vector Datacubes", " Chapter 4 Raster and vector datacubes Array data are data where values are indexed along multiple array dimensions. Raster and vector datacubes refer to array data, where one or more of the dimensions refer to space, and often other dimensions refer to time. 4.1 Package stars Athough package sp has always had limited support for raster data, over the last decade R package raster has clearly been dominant as the prime package for powerful, flexible and scalable raster analysis. Its data model is that of a 2D raster, or a set of raster layers (a “raster stack”). This follows the classical static GIS world view, where the world is modelled as a set of layers, each representing a different theme. A lot of data available today however is dynamic, and comes as time series of rasters for different themes. A raster stack does not meaningfully reflect this, requiring the user to do shadow book keeping of which layer represents what. Also, the raster package does an excellent job in scaling computations up to datasizes no larger than the local storage (the computer’s hard drives). Recent datasets however, including satellite imagery, climate model or weather forecasting data, often no longer fit in local storage. Package spacetime addresses the analysis of time series of vector geometries or raster grid cells, but does not extend to higher-dimensional arrays. Here, we introduce a new package for raster analysis, called stars (for scalable, spatiotemporal tidy arrays) that allows for representing dynamic raster stacks, in addition to regular grids handles rotated, sheared, rectilinear and curvilinear rasters, provides a tight integration with package sf, follows the tidyverse design principles, aims at being scalable, also beyond local disk size, also handles array data with non-raster spatial dimensions, the vector datacubes, provides further integration of novel features in the GDAL library than other R packages have given so far. Vector data cubes include for instance time series for simple features, or spatial graph data such as origin-destination matrices. The wider concept of spatial vector and raster data cubes is explained in section 4.3 4.2 Raster data As introduced in section 3.3, raster data are spatial datasets where observations are aligned on a regular grid usually with square grid cells (in some coordinate reference system, chapter @ref{rs}). Raster datasets are used often to represent spatially continuously varying phenomena such as temperature or elevation, and also for observed imagery for instance obtained from satellites. 4.2.1 Reading and writing raster data Raster data typically are read from a file. We read an example file of a regular, non-rotated grid from the package stars: tif = system.file(&quot;tif/L7_ETMs.tif&quot;, package = &quot;stars&quot;) library(stars) x = read_stars(tif) The dataset contains (a section of) a Landsat 7 scene, with the 6 30m-resolution bands (bands 1-5 and 7) for a region covering the city of Olinda, Brazil. A short summary of the data is given by x #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 1.0 #&gt; 1st Qu.: 54.0 #&gt; Median : 69.0 #&gt; Mean : 68.9 #&gt; 3rd Qu.: 86.0 #&gt; Max. :255.0 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL where we see the offset, cellsize, coordinate reference system, and dimensions. The object x is a simple list of length one, holding a three-dimensional array: length(x) #&gt; [1] 1 class(x[[1]]) #&gt; [1] &quot;array&quot; dim(x[[1]]) #&gt; x y band #&gt; 349 352 6 and in addition holds an attribute with a dimensions table with all the metadata required to know what the array values refer to, obtained by st_dimensions(x) #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL We can get the spatial extent of the array by st_bbox(x) #&gt; xmin ymin xmax ymax #&gt; 288776 9110729 298723 9120761 Raster data can be written to local disk using st_write: st_write(x, &quot;x.tif&quot;) where the format (in this case, GeoTIFF) is derived from the file extension. As for simple features, reading and writing uses the GDAL library; the list of available drivers for raster data is obtained by st_drivers(&quot;raster&quot;) 4.2.2 Plotting raster data We can use the base plot method for stars objects, shown in figure 4.1. plot(x) Figure 4.1: 6 30m Landsat bands downsampled to 90m for Olinda, Br. The default color scale uses grey tones, and stretches this such that color breaks correspond to data quantiles over all bands. A more familiar view is the rgb or false color composite: par(mfrow = c(1, 2)) plot(x, rgb = c(3,2,1), reset = FALSE, main = &quot;RGB&quot;) # rgb plot(x, rgb = c(4,3,2), main = &quot;False color (NIR-R-G)&quot;) # false color Figure 4.2: two RGB composites 4.2.3 Analysing raster data Element-wise mathematical operations on stars objects are just passed on to the arrays. This means that we can call functions and create expressions: log(x) #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. :0.00 #&gt; 1st Qu.:3.99 #&gt; Median :4.23 #&gt; Mean :4.12 #&gt; 3rd Qu.:4.45 #&gt; Max. :5.54 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL x + 2 * log(x) #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 1.0 #&gt; 1st Qu.: 62.0 #&gt; Median : 77.5 #&gt; Mean : 77.1 #&gt; 3rd Qu.: 94.9 #&gt; Max. :266.1 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL or even mask out certain values: x2 = x x2[x &lt; 50] = NA x2 #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 50 #&gt; 1st Qu.: 64 #&gt; Median : 75 #&gt; Mean : 79 #&gt; 3rd Qu.: 90 #&gt; Max. :255 #&gt; NA&#39;s :149170 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL or un-mask areas: x2[is.na(x2)] = 0 x2 #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 0 #&gt; 1st Qu.: 54 #&gt; Median : 69 #&gt; Mean : 63 #&gt; 3rd Qu.: 86 #&gt; Max. :255 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] #&gt; band 1 6 NA NA NA NA NULL Dimension-wise, we can apply functions to array dimensions of stars objects just like apply does this to matrices. For instance, to compute for each pixel the mean of the 6 band values we can do st_apply(x, c(&quot;x&quot;, &quot;y&quot;), mean) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 25.5 #&gt; 1st Qu.: 53.3 #&gt; Median : 68.3 #&gt; Mean : 68.9 #&gt; 3rd Qu.: 82.0 #&gt; Max. :255.0 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] A more meaningful function would e.g. compute the NDVI (normalized differenced vegetation index): ndvi = function(x) (x[4]-x[3])/(x[4]+x[3]) st_apply(x, c(&quot;x&quot;, &quot;y&quot;), ndvi) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. :-0.753 #&gt; 1st Qu.:-0.203 #&gt; Median :-0.069 #&gt; Mean :-0.064 #&gt; 3rd Qu.: 0.187 #&gt; Max. : 0.587 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE NULL [x] #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE NULL [y] Alternatively, to compute for each band the mean of the whole image we can do as.data.frame(st_apply(x, c(&quot;band&quot;), mean)) #&gt; band L7_ETMs.tif #&gt; 1 1 79.1 #&gt; 2 2 67.6 #&gt; 3 3 64.4 #&gt; 4 4 59.2 #&gt; 5 5 83.2 #&gt; 6 6 60.0 which is so small it can be printed here as a data.frame. In these two examples, entire dimensions disappear. Sometimes, this does not happen; we can for instance compute the three quartiles for each band st_apply(x, c(&quot;band&quot;), quantile, c(.25, .5, .75)) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 32.0 #&gt; 1st Qu.: 60.8 #&gt; Median : 66.5 #&gt; Mean : 69.8 #&gt; 3rd Qu.: 78.8 #&gt; Max. :112.0 #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; quantile 1 3 NA NA NA NA 25%, ..., 75% #&gt; band 1 6 NA NA NA NA NULL and see that this creates a new dimension, quantile, with three values. Alternatively, the three quantiles over the 6 bands for each pixel are obtained by st_apply(x, c(&quot;x&quot;, &quot;y&quot;), quantile, c(.25, .5, .75)) #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; L7_ETMs.tif #&gt; Min. : 4.0 #&gt; 1st Qu.: 55.0 #&gt; Median : 69.2 #&gt; Mean : 67.2 #&gt; 3rd Qu.: 81.2 #&gt; Max. :255.0 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; quantile 1 3 NA NA NA NA #&gt; x 1 349 288776 28.5 +proj=utm +zone=25 +south... FALSE #&gt; y 1 352 9120761 -28.5 +proj=utm +zone=25 +south... FALSE #&gt; values #&gt; quantile 25%, ..., 75% #&gt; x NULL [x] #&gt; y NULL [y] 4.2.4 Handling large raster datasets A common challenge with raster datasets is not only that they come in large files (single Sentinel-2 tiles are around 1 Gb), but that many of these files, potentially thousands, are needed to address the area and time period of interest. At time of writing this, the Copernicus program which runs all Sentinel satellites publishes 160 Tb of images per day. This means that a classic pattern in using R, consisting of downloading data to local disc, loading the data in memory, analysing it is not going to work. Cloud-based Earth Observation processing platforms like Google Earth Engine (Gorelick et al. 2017) or Sentinel Hub recognize this and let users work with datasets up to 20 petabyte rather easily and with a great deal of interactivity. They share the following properties: computations are posponed as long as possible (lazy evaluation), only the data you ask for are being computed and returned, and nothing more, storing intermediate results is avoided in favour of on-the-fly computations, maps with useful results are generated and shown quickly to allow for interactive model development. This is similar to the dbplyr interface to databases and cloud-based analytics environments, but differs in the aspect of what we want to see quickly: rather than the first \\(n\\) records, we want a quick overview of the results, in the form of a map covering the whole area, or part of it, but at screen resolution rather than native (observation) resolution. If for instance we want to “see” results for the United States on screen with 1000 x 1000 pixels, we only need to compute results for this many pixels, which corresponds roughly to data on a grid with 3000 m x 3000 m grid cells. For Sentinel-2 data with 10 m resolution, this means we can subsample with a factor 300, giving 3 km x 3 km resolution. Processing, storage and network requirements then drop a factor \\(300^2 \\approx 10^5\\), compared to working on the native 10 m x 10 m resolution. On the platforms mentioned, zooming in the map triggers further computations on a finer resolution and smaller extent. A simple optimisation that follows these lines is how stars’ plot method works: in case of plotting large rasters, it subsamples the array before it plots, drastically saving time. The degree of subsampling is derived from the plotting region size and the plotting resolution (pixel density). For vector devices, such as pdf, R sets plot resolution to 75 dpi, corresponding to 0.3 mm per pixel. Enlarging plots may reveal this, but replotting to an enlarged devices will create a plot at target density. 4.2.5 stars proxy objects To handle datasets that are too large to fit in memory, stars provides stars_proxy objects. To demonstrate its use, we will use the starsdata package, an R data package with larger datasets (around 1 Gb total). It can be installed by install.packages(&quot;starsdata&quot;, repos = &quot;http://pebesma.staff.ifgi.de&quot;, type = &quot;source&quot;) We can “load” a Sentinel-2 image from it by granule = system.file(&quot;sentinel/S2A_MSIL1C_20180220T105051_N0206_R051_T32ULE_20180221T134037.zip&quot;, package = &quot;starsdata&quot;) file.size(granule) #&gt; [1] 7.69e+08 base_name = strsplit(basename(granule), &quot;.zip&quot;)[[1]] s2 = paste0(&quot;SENTINEL2_L1C:/vsizip/&quot;, granule, &quot;/&quot;, base_name, &quot;.SAFE/MTD_MSIL1C.xml:10m:EPSG_32632&quot;) (p = read_stars(s2, proxy = TRUE)) #&gt; stars_proxy object with 1 attribute in file: #&gt; $`MTD_MSIL1C.xml:10m:EPSG_32632` #&gt; [1] &quot;SENTINEL2_L1C:/vsizip//home/edzer/R/x86_64-pc-linux-gnu-library/3.5/starsdata/sentinel/S2A_MSIL1C_20180220T105051_N0206_R051_T32ULE_20180221T134037.zip/S2A_MSIL1C_20180220T105051_N0206_R051_T32ULE_20180221T134037.SAFE/MTD_MSIL1C.xml:10m:EPSG_32632&quot; #&gt; #&gt; dimension(s): #&gt; from to offset delta refsys point values #&gt; x 1 10980 3e+05 10 +proj=utm +zone=32 +datum... NA NULL [x] #&gt; y 1 10980 6e+06 -10 +proj=utm +zone=32 +datum... NA NULL [y] #&gt; band 1 4 NA NA NA NA NULL object.size(p) #&gt; 7336 bytes and we see that this does not actually load any of the pixel values, but keeps the reference to the dataset and fills the dimensions table. (The convoluted s2 name is needed to point GDAL to the right file inside the .zip file containing 115 files in total). The idea of a proxy object is that we can build expressions like p2 = p * 2 but that these are not evaluated. Only when we really need the data, e.g. because we want to plot it, is p * 2 evaluated. We need data when we want to plot data we want to write an object to disk, with st_write. we want to explicitly load an object in memory, with st_as_stars In case the entire object does not fit in memory, plot and st_write each choose a strategy to deal with this: plot fetches only the pixels that can be plotted, rather than the ones that are available, and st_write reads, processes, and writes data chunk by chunk. As an example, plot(p) only fetches the pixels that can be seen on the plot device, rather than the 10980 x 10980 pixels available in each band. The downsampling ratio taken is floor(sqrt(prod(dim(p)) / prod(dev.size(&quot;px&quot;)))) #&gt; [1] 19 meaning that for every 19 x 19 sub-image in the original image, only one pixel is read, and plotted. This value is still a bit too high as it ignores the white space and space for the key on the plotting device. 4.2.6 Operations on proxy objects A few dedicated methods are available for stars_proxy objects: methods(class = &quot;stars_proxy&quot;) #&gt; [1] [ adrop aperm c #&gt; [5] dim Math Ops plot #&gt; [9] print st_apply st_as_stars st_crop #&gt; [13] st_redimension st_write #&gt; see &#39;?methods&#39; for accessing help and source code We have seen plot and print in action; dim reads out the dimension from the dimensions metadata table. The three methods that actually fetch data are st_as_stars, plot and st_write. st_as_stars reads the actual data into a stars object, its argument downsample controls the downsampling rate. plot does this too, choosing an appropriate downsample value from the device resolution, and plots the object. st_write writes a star_proxy object to disc. All other methods for stars_proxy objects do not actually operate on the raster data but add the operations to a to do list, attached to the object. Only when actual raster data are fetched, e.g. by calling plot or st_as_stars, the commands in this list are executed. st_crop limits the extent (area) of the raster that will be read. c combines stars_proxy objects, but still doesn’t read any data. adrop drops empty dimensions, aperm changes dimension order. st_write reads and processes its input chunk-wise; it has an argument chunk_size that lets users control the size of spatial chunks. 4.3 Vector Datacubes Data cubes are multi-dimensional array data, where array dimensions are meaningfully related to categorical or continuous variables that may include space and time (Lu, Appel, and Pebesma 2018). We have seen raster data cubes so far, e.g. raster data naturally fit in two-dimensional arrays, multi-spectral raster data fit in three-dimensional arrays (cubes), and time series of multi-spectral raster data fit in four-dimensional arrays (hyper-cubes). Besides Earth Observation/satellite imagery data, a large class of datacubes come from modelling data, e.g. from oceanographic, meteorologic or climate models, where dimensions may include latitude and longitude altitude, or depth pressure level (substituting altitude) time time to forecast, in addition to time when a forecast was made we can add to this as an additional dimension variable of interest (pressure, temperature, humidity, wind speed, salinity, …) when we accept that categorical variables also “take” a dimension. The alternative would be to consider these as “fields”, or “attributes” of array records. Being able to swap dimensions to attributes flexibly and vice-versa leads to powerful analysis, as e.g. shown by the powerful array database SciDB (Brown 2010). We go from raster data cubes to vector data cubes if we replace the two or three raster dimensions with one dimension listing a set of feature geometries (points, lines or polygons). One example would be air quality data, where we could have \\(PM_{10}\\) measurements for a set of monitoring stations, and a sequence of time intervals aligned in a vector data cube. Another example would be demographic or epidemiological data, where we have a time series of (population, disease) counts, with number of persons by region, for \\(n\\) regions by age class, for \\(m\\) age classes, and by year, for \\(p\\) years. which forms an array with \\(n m p\\) elements. R has strong native support for arbitrarily dimensioned arrays, and we can get the value for year \\(i\\), age class \\(j\\) and year \\(k\\) from array a by a[i,j,k] and e.g. the sub-array for age class \\(j\\) by a[,j,] Thinking along the classical GIS lines, where we would have either raster or vector data, one is left with the question what to do when we have a raster time series data cube (e.g. a climate model forecast) and want to obtain a vector time series data cube with aggregates of the model forecast over polygons, as time series. For spatial data science, support of vector and raster data cubes is extremely useful, because many variables are both spatially and temporaly varying, and because we often want to either change dimensions or aggregate them out, but in a fully flexible manner and order. Examples of changing dimensions are interpolating air quality measurements to values on a regular grid (raster) estimating density maps from points or lines, e.g. with the number of flights passing by per week within a range of 1 km aggregating climate model predictions to summary indicators for administrative regions combining Earth observation data from different sensors, e.g. Modis (250 m pixels, every 16 days) with Sentinel-2 (10 m, every 5 days). Examples of aggregating one ore more full dimensions are assessments of which air quality monitoring stations indicate unhealthy conditions which region has the highest increase in disease incidence global warming (e.g. in degrees per year) 4.3.1 Example: aggregating air quality time series Air quality data from package spacetime were obtained from the airBase European air quality data base. Downloaded were daily average PM\\(_{10}\\) values for rural background stations in Germany, 1998-2009. We can create a stars object from the air matrix, the dates Date vector and the stations SpatialPoints objects by library(spacetime) data(air) # this loads several datasets in .GlobalEnv dim(air) #&gt; space time #&gt; 70 4383 d = st_dimensions(station = st_as_sfc(stations), time = dates) (aq = st_as_stars(list(PM10 = air), dimensions = d)) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; PM10 #&gt; Min. : 0 #&gt; 1st Qu.: 10 #&gt; Median : 15 #&gt; Mean : 18 #&gt; 3rd Qu.: 22 #&gt; Max. :274 #&gt; NA&#39;s :157659 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; station 1 70 NA NA +proj=longlat +datum=WGS8... TRUE #&gt; time 1 4383 1998-01-01 1 days Date NA #&gt; values #&gt; station POINT (9.59 53.7), ..., POINT (9.45 49.2) #&gt; time NULL We can see from figure 4.3 that the time series are quite long, but also have large missing value gaps. Figure 4.4 shows the spatial distribution measurement stations and mean PM\\(_{10}\\) values. image(aperm(log(aq), 2:1), main = &quot;NA pattern (white) in PM10 station time series&quot;) Figure 4.3: space-time diagram of PM\\(_{10}\\) measurements by time and station plot(st_as_sf(st_apply(aq, 1, mean, na.rm = TRUE)), reset = FALSE, pch = 16) plot(DE, add=TRUE) Figure 4.4: locations of PM\\(_{10}\\) measurement stations, showing mean values We can now aggregate these station time series to area means, mostly as a simple exercise. For this, we use the aggregate method for stars objects (a = aggregate(aq, st_as_sf(DE_NUTS1), mean, na.rm = TRUE)) #&gt; although coordinates are longitude/latitude, st_intersects assumes that they are planar #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; PM10 #&gt; Min. : 1 #&gt; 1st Qu.: 11 #&gt; Median : 15 #&gt; Mean : 18 #&gt; 3rd Qu.: 22 #&gt; Max. :172 #&gt; NA&#39;s :25679 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; aggr 1 16 NA NA +proj=longlat +datum=WGS8... NA #&gt; time 1 4383 1998-01-01 1 days Date NA #&gt; values #&gt; aggr MULTIPOLYGON (((9.65 49.8, ..., ..., MULTIPOLYGON (((10.8 51.6, ... #&gt; time NULL and we can now for instance show the maps for six arbitrarily chosen days (figure 4.5), library(tidyverse) a %&gt;% filter(time &gt;= &quot;2008-01-01&quot;, time &lt; &quot;2008-01-07&quot;) %&gt;% plot(key.pos = 4) Figure 4.5: areal mean PM\\(_{10}\\) values, for six days or a time series of mean values for a single state (figure 4.6). suppressPackageStartupMessages(library(xts)) plot(as.xts(a)[,4], main = DE_NUTS1$NAME_1[4]) Figure 4.6: areal mean PM\\(_{10}\\) values, for six days 4.3.2 Example: Bristol origin-destination datacube The data used for this example come from (Lovelace, Nowosad, and Muenchow 2019), and concern origin-destination (OD) counts: the number of persons going from region A to region B, by transportation mode. We have feature geometries for the 102 origin and destination regions, shown in figure 4.7. library(spDataLarge) plot(st_geometry(bristol_zones), axes = TRUE, graticule = TRUE) plot(st_geometry(bristol_zones)[33], col = &#39;red&#39;, add = TRUE) Figure 4.7: Origin destination data zones for Bristol, UK, with zone 33 (E02003043) colored red and the OD counts come in a table with OD pairs as records, and transportation mode as variables: head(bristol_od) #&gt; # A tibble: 6 x 7 #&gt; o d all bicycle foot car_driver train #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 E02002985 E02002985 209 5 127 59 0 #&gt; 2 E02002985 E02002987 121 7 35 62 0 #&gt; 3 E02002985 E02003036 32 2 1 10 1 #&gt; 4 E02002985 E02003043 141 1 2 56 17 #&gt; 5 E02002985 E02003049 56 2 4 36 0 #&gt; 6 E02002985 E02003054 42 4 0 21 0 We see that many combinations of origin and destination are implicit zeroes, otherwise these two numbers would have been the same: nrow(bristol_zones)^2 #&gt; [1] 10404 nrow(bristol_od) #&gt; [1] 2910 We will form a three-dimensional vector datacube with origin, destination and transportation mode as dimensions. For this, we first “tidy” the bristol_od table to have origin (o), destination (d), transportation mode (mode), and count (n) as variables, using gather: # create O-D-mode array: bristol_tidy &lt;- bristol_od %&gt;% select(-all) %&gt;% gather(&quot;mode&quot;, &quot;n&quot;, -o, -d) head(bristol_tidy) #&gt; # A tibble: 6 x 4 #&gt; o d mode n #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 E02002985 E02002985 bicycle 5 #&gt; 2 E02002985 E02002987 bicycle 7 #&gt; 3 E02002985 E02003036 bicycle 2 #&gt; 4 E02002985 E02003043 bicycle 1 #&gt; 5 E02002985 E02003049 bicycle 2 #&gt; 6 E02002985 E02003054 bicycle 4 Next, we form the three-dimensional array a, filled with zeroes: od = bristol_tidy %&gt;% pull(&quot;o&quot;) %&gt;% unique nod = length(od) mode = bristol_tidy %&gt;% pull(&quot;mode&quot;) %&gt;% unique nmode = length(mode) a = array(0L, c(nod, nod, nmode), dimnames = list(o = od, d = od, mode = mode)) We see that the dimensions are named with the zone names (o, d) and the transportation mode name (mode). Every row of bristol_tidy denotes an array entry, and we can use this to to fill the non-zero entries of the bristol_tidy table with their appropriate value (n): a[as.matrix(bristol_tidy[c(&quot;o&quot;, &quot;d&quot;, &quot;mode&quot;)])] = bristol_tidy$n To be sure that there is not an order mismatch between the zones in bristol_zones and the zone names in bristol_tidy, we can get the right set of zones by: order = match(od, bristol_zones$geo_code) # it happens this equals 1:102 zones = st_geometry(bristol_zones)[order] (It happens that the order is already correct, but it is good practice to not assume this). Next, with zones and modes we can create a stars dimensions object: library(stars) (d = st_dimensions(o = zones, d = zones, mode = mode)) #&gt; from to offset delta refsys point #&gt; o 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; d 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; mode 1 4 NA NA NA NA #&gt; values #&gt; o MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; d MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; mode bicycle, ..., train and finally build or stars object from a and d: (odm = st_as_stars(list(N = a), dimensions = d)) #&gt; stars object with 3 dimensions and 1 attribute #&gt; attribute(s): #&gt; N #&gt; Min. : 0 #&gt; 1st Qu.: 0 #&gt; Median : 0 #&gt; Mean : 5 #&gt; 3rd Qu.: 0 #&gt; Max. :1296 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; o 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; d 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; mode 1 4 NA NA NA NA #&gt; values #&gt; o MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; d MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; mode bicycle, ..., train We can take a single slice through from this three-dimensional array, e.g. for zone 33 (figure 4.7), by odm[,,33], and plot it: plot(odm[,,33] + 1, logz = TRUE) Subsetting this way, we take all attributes (there is only one: N) since the first argument is empty, we take all origin regions (second argument empty), we take destination zone 33 (third argument), and all transportation modes (fourth argument empty, or missing). Why plotted this particular zone because it has the most travelers as its destination. We can find this out by summing all origins and travel modes by destination: d = st_apply(odm, 2, sum) which.max(d[[1]]) #&gt; [1] 33 Other aggregations we can carry out include: total transportation by OD (102 x 102): st_apply(odm, 1:2, sum) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; N #&gt; Min. : 0 #&gt; 1st Qu.: 0 #&gt; Median : 0 #&gt; Mean : 19 #&gt; 3rd Qu.: 19 #&gt; Max. :1434 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; o 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; d 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; values #&gt; o MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; d MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... Origin totals, by mode: st_apply(odm, c(1,3), sum) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; N #&gt; Min. : 1 #&gt; 1st Qu.: 58 #&gt; Median : 214 #&gt; Mean : 490 #&gt; 3rd Qu.: 771 #&gt; Max. :2903 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; o 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; mode 1 4 NA NA NA NA #&gt; values #&gt; o MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; mode bicycle, ..., train Destination totals, by mode: st_apply(odm, c(2,3), sum) #&gt; stars object with 2 dimensions and 1 attribute #&gt; attribute(s): #&gt; N #&gt; Min. : 0 #&gt; 1st Qu.: 13 #&gt; Median : 104 #&gt; Mean : 490 #&gt; 3rd Qu.: 408 #&gt; Max. :12948 #&gt; dimension(s): #&gt; from to offset delta refsys point #&gt; d 1 102 NA NA +proj=longlat +datum=WGS8... FALSE #&gt; mode 1 4 NA NA NA NA #&gt; values #&gt; d MULTIPOLYGON (((-2.51 51.4,..., ..., MULTIPOLYGON (((-2.55 51.5,... #&gt; mode bicycle, ..., train Origin totals, summed over modes: o = st_apply(odm, 1, sum) Destination totals, summed over modes (we had this): d = st_apply(odm, 2, sum) We take o and d together and plot them by x = (c(o, d, along = list(od = c(&quot;origin&quot;, &quot;destination&quot;)))) plot(x, logz = TRUE) There is something to say for the argument that such maps give the wrong message, as both amount (color) and polygon size give an impression of amount. To take out the amount in the count, we can compute densities (count / km\\(^2\\)), by library(units) a = as.numeric(set_units(st_area(st_as_sf(o)), km^2)) dens_o = o / a dens_d = d / a plot(c(dens_o, dens_d, along = list(od = c(&quot;origin&quot;, &quot;destination&quot;))), logz = TRUE) 4.3.3 Are datacubes tidy? Yes! The tidy data paper (Wickham 2014b) may suggest that such array data should be processed not as an array, but in a long table where each row holds (region, class, year, value), and it is always good to be able to do this. For primary handling and storage however, this is often not an option, because a lot of array data are collected or generated as array data, e.g. by imagery or other sensory devices, or e.g. by climate models it is easier to derive the long table form from the array than vice versa the long table form requires much more memory, since the space occupied by dimension values is \\(O(nmp)\\), rather than \\(O(n+m+p)\\) when missing-valued cells are dropped, the long table form loses the implicit indexing of the array form To put this argument to the extreme, consider for instance that all image, video and sound data are stored in array form; few people would make a real case for storing them in a long table form instead. Nevertheless, R packages like tsibble take this approach, and have to deal with ambiguous ordering of multiple records with identical time steps for different spatial features and index them, which is solved for both automatically by using the array form. Package stars tries to follow the tidy manifesto to handle array sets, and has particularly developed support for the case where one or more of the dimensions refer to space, and/or time. References "],
["geommanip.html", "Chapter 5 Manipulating Geometries 5.1 Predicates 5.2 Measures 5.3 Geometry generating functions 5.4 Precision 5.5 Generating invalid geometries 5.6 Warnings for longitude/latitude geometries", " Chapter 5 Manipulating Geometries Simple feature geometries can be queried for properties, combined into new geometries, and combinations of geometries can be queried for properties. This chapter will give an overview of the operations offered by sf, entirely focusing on geometrical properties. The next chapter, 6, focuses on the analysis of non-geometrical feature properties, in relationship to their geometries. Some of the material in this chapter also appeared as (Pebesma 2018c). Several of the concepts of geometric manipulations were introduced in chapter @{geometries}. This chapter gives a complete listing of all geometries permitted on geometries, illustrating some of them. We can categorise operations in terms of what they take as input, and what they give as output. In terms of output we have operations that give one or more predicates: a logical asserting a certain property is TRUE, measures: a value (e.g. a numeric value with measurement unit), or geometries and in terms of what they operate on, we distinguish operations that work on a single geometry (unary operations) pairs of geometries (binary operations) sets of geometries (n-ary operations) Before we will go through all combinations, we make two observations: most functions are implemented as methods, and operate equally on single geometry objects (sfg), geometry set objects (sfc) or simple feature (sf) objects. also for binary and n-ary operations, sfg or sf objects are accepted as input, and taken as a set of geometries. 5.1 Predicates Predicates return a logical, TRUE or FALSE value, or a set of those. 5.1.1 Unary predicates st_is_simple returns whether a geometry is simple: st_is_simple(st_sfc( st_point(c(0,1)), st_linestring(rbind(c(0,0), c(1,1), c(0,1), c(1,0))))) # self-intersects #&gt; [1] TRUE FALSE st_is_valid returns whether a geometry is valid st_is_valid(st_sfc( st_linestring(rbind(c(1,1), c(1,2))), st_linestring(rbind(c(1,1), c(1,1))))) # zero-length #&gt; [1] TRUE FALSE st_is_empty returns whether a geometry is empty st_is_empty(st_point()) #&gt; [1] TRUE st_is_longlat returns whether the coordinate reference system is geographic @{cs,rs}: demo(nc, ask = FALSE, echo = FALSE) #&gt; Reading layer `nc.gpkg&#39; from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.5/sf/gpkg/nc.gpkg&#39; using driver `GPKG&#39; #&gt; Simple feature collection with 100 features and 14 fields #&gt; Attribute-geometry relationship: 0 constant, 8 aggregate, 6 identity #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6 #&gt; epsg (SRID): 4267 #&gt; proj4string: +proj=longlat +datum=NAD27 +no_defs st_is_longlat(nc) #&gt; [1] TRUE nc2 &lt;- st_transform(nc, 3857) # to web Mercator st_is_longlat(nc2) #&gt; [1] FALSE st_is_longlat(st_point(0:1)) #&gt; [1] NA st_is is an easy way to check for the simple feature geometry type: st_is(st_point(0:1), &quot;POINT&quot;) #&gt; [1] TRUE all(st_is(nc, &quot;POLYGON&quot;)) #&gt; [1] FALSE all(st_is(nc, &quot;MULTIPOLYGON&quot;)) #&gt; [1] TRUE Equality and inequality of geometries can be checked by == or !=; it uses geometric equality, and is insensitive to the order of traversal of nodes: st_sfc(st_point(0:1), st_point(1:2)) == st_sfc(st_point(0:1)) #&gt; [1] TRUE FALSE st_linestring(rbind(c(0,0), c(1,1))) == st_linestring(rbind(c(1,1), c(0,0))) #&gt; [1] TRUE Under the hood, it uses st_equals, discussed by the binary predicates. 5.1.2 Binary predicates Binary predicates result in a TRUE or FALSE value for every pair of inputs. For two sets of inputs with \\(n\\) and \\(m\\) geometries respectively, this results in an \\(n \\times m\\) logical matrix. Because \\(n\\) and/or \\(m\\) may be very large and the predicate matrix typically contains mostly FALSE values, a sparse representation of it, a sparse geometry binary predicate (sgbp) object, is returned by all functions. They are simply lists of indices of the TRUE values in each row: (r &lt;- st_touches(nc2[1:2,], nc2)) #&gt; Sparse geometry binary predicate list of length 2, where the predicate was `touches&#39; #&gt; 1: 2, 18, 19 #&gt; 2: 1, 3, 18 str(r) #&gt; List of 2 #&gt; $ : int [1:3] 2 18 19 #&gt; $ : int [1:3] 1 3 18 #&gt; - attr(*, &quot;predicate&quot;)= chr &quot;touches&quot; #&gt; - attr(*, &quot;region.id&quot;)= chr [1:2] &quot;1&quot; &quot;2&quot; #&gt; - attr(*, &quot;ncol&quot;)= int 100 #&gt; - attr(*, &quot;class&quot;)= chr &quot;sgbp&quot; sgbp objects have the following methods: methods(class = &#39;sgbp&#39;) #&gt; [1] as.data.frame as.matrix dim Ops print #&gt; [6] t #&gt; see &#39;?methods&#39; for accessing help and source code For understanding predicates, the dimensionally extended 9-intersection model (DE-9IM, (Clementini, Di Felice, and Oosterom 1993, Egenhofer and Franzosa (1991))) is adopted, which is explained in more detail on Wikipedia. Briefly, it considers that every geometry has an interior, a boundary and an exterior. For polygons this is trivial, for points the boundary is an empty set, for linestrings the boundary is formed by the end points and the interior by all non end points. Also, any geometry has a dimension of 0 (points), 1 (lines) or 2 (polygons) or non-existent in the case of an empty geometry. A relationship between two geometries A and B is expressed by the dimension of the overlap (intersections) of 9 intersections, formed by the 9 pairs from the interior, boundary and exterior of A, and the interior, boundary and exterior of B. We can query this relation by using st_relate B = st_linestring(rbind(c(0,0), c(1,0))) A = st_point(c(0.5, 0)) # halfway the line st_relate(A, B) #&gt; [,1] #&gt; [1,] &quot;0FFFFF102&quot; In the relationship found, 0FFFFF102, F indicates empty geometries, and we see from 0FF that the (interior of the) point has 0-dimensional overlap with the interior of line (i.e., the overlap is a point), and no overlap with the boundary or the exterior of the line, FFF that the (empty) border of the point has nothing in common with the line, and 102 that the exterior of the point (all points except this one) have a 1-dimensional overlap with the interior of the line, a 0-dimensional overlap with the boundary of the line (its end points), and a 2-dimensional overlap with the exterior of the line. We can query whether a particular relationship holds by giving st_relate a pattern. To check for instance whether point A overlaps with an end point of linestring B, we can use st_relate(A, B, pattern = &quot;F0FFFFFFF&quot;) %&gt;% as.matrix() #&gt; [,1] #&gt; [1,] FALSE In these patterns, * can be used for anything, and T for non-empty (0, 1 or 2). The standard relationships below are all expressed as particular query patterns, the Wikipedia page gives details on the patterns used. The binary predicates provided by package sf are predicate value inverse of st_contains None of the points of A are outside B st_within st_contains_properly A contains B and B has no points in common with the boundary of A st_covers No points of B lie in the exterior of A st_covered_by st_covered_by inverse of st_covers st_crosses A and B have some but not all interior points in common st_disjoint A and B have no points in common st_intersects st_equals A and B are geometrically equal; node order number of nodes may differ; identical to A contains B AND A within B st_equals_exact A and B are geometrically equal, and have identical node order st_intersects A and B are not disjoint st_disjoint st_is_within_distance A is closer to B than a given distance st_within None of the points of B are outside A st_contains st_touches A and B have at least one boundary point in common, but no interior points st_overlaps A and B have some points in common; the dimension of these is identical to that of A and B st_relate given a pattern, returns whether A and B adhere to this pattern 5.1.3 N-ary Higher-order predicates are not supported by special functions. 5.2 Measures 5.2.1 Unary Unary measures return a single value that describes a property of the geometry: function returns st_dimension 0 for points, 1 for linear, 2 for polygons, NA for empty geometries st_area the area for geometries st_length the lengths of linear geometries lwgeom::st_geohash the geohash for geometries st_geometry_type the types of a set of geometries 5.2.2 Binary st_distance returns the distances between pairs of geometries, either as a vector with distances between the two first, the two second, … pairs, or as a matrix with all pairwise distances. The result is numeric, or is of class units (Pebesma, Mailund, and Hiebert 2016a) when distance units can be derived from the coordinate reference system (chapter @{rs}): st_distance(nc[1:3,], nc[2:4,], by_element = TRUE) %&gt;% setNames(NULL) #&gt; Units: [m] #&gt; [1] 0 0 367505 st_distance(nc[1:3,], nc[2:4,]) #&gt; Units: [m] #&gt; [,1] [,2] [,3] #&gt; [1,] 0 25650 440513 #&gt; [2,] 0 0 409370 #&gt; [3,] 0 0 367505 st_relate returns the relation pattern, as explained in section @{de9im}, or an sgbp object when given a pattern template to match to. 5.2.3 N-ary No higher-order functions returning a measure are available. 5.3 Geometry generating functions 5.3.1 Unary Unary operations work on a per-geometry basis, and for each geometry return a new geometry. None of these functions operate on more than one feature geometry. Most functions are implemented as (S3) generic, with methods for sfg, sfc and sf; their output is of the same class as their input: for sfg input, an sfg value is returned for sfc input, a new set of geometries is returned as sfc for sf objects, the same sf object is returned which has geometries replaced with the new ones. function returns a geometry… st_centroid of type POINT with the geometry’s centroid st_buffer that is this larger (or smaller) than the input geometry, depending on the buffer size st_jitter that was moved in space a certain amount, using a bivariate uniform distribution st_wrap_dateline cut into pieces that do no longer cover the dateline st_boundary with the boundary of the input geometry st_convex_hull that forms the convex hull of the input geometry (figure 5.1) st_line_merge after merging connecting LINESTRING elements of a MULTILINESTRING into longer LINESTRINGs. st_make_valid that is valid st_node with added nodes to linear geometries at intersections without a node; only works on individual linear geometries st_point_on_surface with a (arbitrary) point on a surface st_polygonize of type polygon, created from lines that form a closed ring st_segmentize a (linear) geometry with nodes at a given density or minimal distance st_simplify simplified by removing vertices/nodes (lines or polygons) lwgeom::st_split that has been split with a splitting linestring st_transform transformed to a new coordinate reference system (chapter @{rs}) st_triangulate with triangulated polygon(s) st_voronoi with the voronoi tesselation of an input geometry (figure 5.1) st_zm with removed or added Z and/or M coordinates st_collection_extract with subgeometries from a GEOMETRYCOLLECTION of a particular type st_cast that is converted to another type par(mar = rep(0,4), mfrow = c(1, 2)) plot(st_geometry(nc)[1], col = NA, border = &#39;black&#39;) plot(st_convex_hull(st_geometry(nc)[1]), add = TRUE, col = NA, border = &#39;red&#39;) box() set.seed(131) mp = st_multipoint(matrix(runif(20), 10)) plot(mp) plot(st_voronoi(mp), add = TRUE, col = NA, border = &#39;red&#39;) box() Figure 5.1: left: convex hull (red) around a polygon (black); right: voronoi diagram (red) from a MULTIPOINT (black) A number of operation can be applied directly to geometries (A = st_point(c(1,2))) #&gt; POINT (1 2) (B = st_linestring(rbind(c(2,2), c(3,4)))) #&gt; LINESTRING (2 2, 3 4) -A #&gt; POINT (-1 -2) B + A #&gt; LINESTRING (3 4, 4 6) st_sfc(B + A) * matrix(c(1,0,0,2), 2, 2) #&gt; Geometry set for 1 feature #&gt; geometry type: LINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 3 ymin: 8 xmax: 4 ymax: 12 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; LINESTRING (3 8, 4 12) st_sfc(A, B) * c(3, 5) # scale first by 3, second by 5: #&gt; Geometry set for 2 features #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 3 ymin: 6 xmax: 15 ymax: 20 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT (3 6) #&gt; LINESTRING (10 10, 15 20) 5.3.2 Binary operations returning geometries Binary functions that return a geometry include function returns infix operator st_intersection the overlapping geometries for pair of geometries &amp; st_union the combination of the geometries; also removes duplicate points, nodes or line pieces | st_difference the geometries of the first after removing the overlap with the second geometry / st_sym_differenc the combinations of the geometries after removing where they overlap %/% When operating on two sfg, single geometries, it is clear what all these functions do: return a single geometry for this pair. When given two sets of geometries (sfc or sf objects), a new set of geometries is returned; for st_intersection containing only the non-empty geometries, for all other operations the geometries from all pairwise evaluation. In case the arguments are of class sf, the attributes of the objects are copied over to all intersections to which each of the features contributed: a = st_sf(a = 1, geom = st_sfc(st_linestring(rbind(c(0,0), c(1,0))))) b = st_sf(b = 1:3, geom = st_sfc(st_point(c(0,0)), st_point(c(1,0)), st_point(c(2,0)))) st_intersection(a, b) #&gt; Warning: attribute variables are assumed to be spatially constant #&gt; throughout all geometries #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 0 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; a b geom #&gt; 1 1 1 POINT (0 0) #&gt; 1.1 1 2 POINT (1 0) When st_intersection or st_difference are called with a single set of geometries (an sfc object), they perform an n-ary operation, explained in the next section. 5.3.3 N-ary operations returning a geometry 5.3.3.1 Union, c, and combine Calling st_union with only a single argument leads either to computing the union of all geometries, or applying union to each of the individual geometries, depending on the setting of by_feature: st_union(b, by_feature = FALSE) # default #&gt; Geometry set for 1 feature #&gt; geometry type: MULTIPOINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 2 ymax: 0 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTIPOINT (0 0, 1 0, 2 0) st_union(b, by_feature = TRUE) # default #&gt; Simple feature collection with 3 features and 1 field #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 2 ymax: 0 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; b geom #&gt; 1 1 POINT (0 0) #&gt; 2 2 POINT (1 0) #&gt; 3 3 POINT (2 0) The c method combines sets of geometries bb = st_geometry(b) c(bb, bb) #&gt; Geometry set for 6 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 2 ymax: 0 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; First 5 geometries: #&gt; POINT (0 0) #&gt; POINT (1 0) #&gt; POINT (2 0) #&gt; POINT (0 0) #&gt; POINT (1 0) or single geometries into single a new single geometry c(st_point(0:1), st_point(1:2)) #&gt; MULTIPOINT (0 1, 1 2) and st_combine uses this to collapse features for different geometries into one: st_combine(c(bb, bb)) #&gt; Geometry set for 1 feature #&gt; geometry type: MULTIPOINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 2 ymax: 0 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTIPOINT (0 0, 1 0, 2 0, 0 0, 1 0, 2 0) When using this on lines or polygons, it is easy to obtain invalid geometries, and one needs to use st_union on the result. (x = st_combine(st_sfc(st_linestring(rbind(c(0,0), c(1,1))), st_linestring(rbind(c(1,0),c(0,1)))))) #&gt; Geometry set for 1 feature #&gt; geometry type: MULTILINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTILINESTRING ((0 0, 1 1), (1 0, 0 1)) st_is_valid(x) #&gt; [1] TRUE st_union(x) %&gt;% st_is_valid() #&gt; [1] TRUE 5.3.3.2 N-ary intersection and difference N-ary st_intersection and st_difference take a single argument, but operate (sequentially) on all pairs, triples, quadruples etc. Consider the plot in figure 5.2: how do we identify the box where all three overlap? Using binary intersections, as of gives us intersections of all pairs, double since x is passed twice: 1-1, 1-1, 1-3, 2-1, 2-2, 2-3, 3-1, 3-2, 3-3: sq = function(pt, sz = 1) st_polygon(list(rbind(c(pt - sz), c(pt[1] + sz, pt[2] - sz), c(pt + sz), c(pt[1] - sz, pt[2] + sz), c(pt - sz)))) x = st_sf(box = 1:3, st_sfc(sq(c(0,0)), sq(c(1.7, -0.5)), sq(c(0.5, 1)))) (ixx = st_intersection(x, x)) %&gt;% nrow #&gt; Warning: attribute variables are assumed to be spatially constant #&gt; throughout all geometries #&gt; [1] 9 lengths(st_overlaps(ixx, ixx)) #&gt; [1] 4 5 5 5 4 5 5 5 4 When we use however (i = st_intersection(x)) #&gt; Simple feature collection with 7 features and 3 fields #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: -1 ymin: -1.5 xmax: 2.7 ymax: 2 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; box geometry n.overlaps origins #&gt; 1 1 POLYGON ((0.7 -1, -1 -1, -1... 1 1 #&gt; 2 1 POLYGON ((1 0, 1 -1, 0.7 -1... 2 1, 2 #&gt; 3 2 POLYGON ((1.5 0.5, 2.7 0.5,... 1 2 #&gt; 4 2 POLYGON ((1 0.5, 1.5 0.5, 1... 2 2, 3 #&gt; 5 1 POLYGON ((1 0.5, 1 0, 0.7 0... 3 1, 2, 3 #&gt; 6 1 POLYGON ((-0.5 1, 1 1, 1 0.... 2 1, 3 #&gt; 7 3 POLYGON ((-0.5 1, -0.5 2, 1... 1 3 we end up with a set of all seven distinct intersections, without overlaps. lengths(st_overlaps(i, i)) #&gt; [1] 0 0 0 0 0 0 0 When given an sf object an sf is returned, with two additional fields, one with the number of overlapping features, and a list-column with the indexes of contributing feature geometries. Figure 5.2: left: three overlapping boxes – how do we identify the small box where all three overlap? right: unique, non-overlapping n-ary intersections Similarly, one can compute n-ary differences from a set \\(\\{s_1, s_2, s_3, ...\\}\\) by creating differences \\(\\{s_1, s_2-s_1, s_3-s_2-s_1, ...\\}\\). This is done by (xd = st_difference(x)) #&gt; Simple feature collection with 3 features and 1 field #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: -1 ymin: -1.5 xmax: 2.7 ymax: 2 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; box geometry #&gt; 1 1 POLYGON ((-1 -1, 1 -1, 1 1,... #&gt; 2 2 POLYGON ((1 0.5, 2.7 0.5, 2... #&gt; 3 3 POLYGON ((-0.5 1, -0.5 2, 1... The result is shown in figure 5.3, for x and for x[3:1], to make clear that the result here depends on order of the geometries. Figure 5.3: difference between subsequent boxes, left: in original order; right: in reverse order Resulting geometries do not overlap: lengths(st_overlaps(xd, xd)) #&gt; [1] 0 0 0 5.3.4 Other geometry manipulators st_make_grid creates a grid of square or hexagonal polygons, based on an input bounding box and a grid cell size. st_graticule creates a set of graticules, lines of constant latitude or longitude, which can serve as a reference on small-scale (large area) maps. 5.4 Precision Geometrical operations, such as finding out whether a certain point is on a line, may fail when coordinates are represented by highly precise floating point numbers, such as 8-byte doubles in R. A remedy might be to limit the precision of the coordinates before the operation. For this, a precision model is adopted by sf. It uses a precision value to round coordinates (X, Y, Z and M) right before they are encoded as well-known binary, and passed on to the libraries where this may have an effect (GEOS, GDAL, liblwgeom). We demonstrate this by an R - WKB - R roundtrip. Rounding can be done in two different ways. First, With a negative precision value, 8-byte doubles get converted to 4-byte floats and back again: (p = st_sfc(st_point(c(1e6/3, 1e4/3)), crs = 3857)) #&gt; Geometry set for 1 feature #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 333000 ymin: 3330 xmax: 333000 ymax: 3330 #&gt; epsg (SRID): 3857 #&gt; proj4string: +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs #&gt; POINT (333333 3333) p %&gt;% st_set_precision(-1) %&gt;% st_as_binary() %&gt;% st_as_sfc() %&gt;% `[[`(1) %&gt;% print(digits = 16) #&gt; POINT (333333.34375 3333.333251953125) Second, with a positive precision \\(p\\), each coordinate value \\(c\\) is replaced by \\[c&#39; = \\mbox{round}(p \\cdot c) / p\\] This implies that for instance with a precision of 1000, the number of decimal places to round to is 1/1000, or to mm if the unit of coordinates is metre: p %&gt;% st_set_precision(1000) %&gt;% st_as_binary() %&gt;% st_as_sfc() %&gt;% `[[`(1) #&gt; POINT (333333 3333) With a precision of e.g. 0.001 or 0.05, rounding to the nearest 1/precision, i.e. if the unit is m to the nearest 1000 m or 20 m, is obtained: p %&gt;% st_set_precision(0.001) %&gt;% st_as_binary() %&gt;% st_as_sfc() %&gt;% `[[`(1) # to nearest 1000 #&gt; POINT (333000 3000) p %&gt;% st_set_precision(0.05) %&gt;% st_as_binary() %&gt;% st_as_sfc() %&gt;% `[[`(1) # to nearest 20 #&gt; POINT (333340 3340) As a convenience, precisions can also be specified as a units object, with the unit to round to, e.g. to the nearest 5 cm: p %&gt;% st_set_precision(units::set_units(5, cm)) %&gt;% st_as_binary() %&gt;% st_as_sfc() %&gt;% `[[`(1) %&gt;% print(digits = 10) #&gt; POINT (333333.35 3333.35) but this requires that the object, p, has a coordinate reference system with known units. In essence, these rounding methods bring the coordinates to points on a regular grid, which is beneficial for geometric computations. Of course, it also affects all computations like areas and distances. Which precision values are best for which application is often a matter of common sense combined with trial and error. A reproducible example illustrating the need for setting precision is found here. 5.5 Generating invalid geometries It is rather easy to have st_intersection generate invalid geometries, resulting in an error. Consider the graph constructed and shown in figure 5.4. In this case, not setting the precision (i.e., precision has value 0) would have led to the cryptic error message Error in CPL_nary_intersection(x) : Evaluation error: TopologyException: found non-noded intersection between LINESTRING (0.329035 -0.0846201, 0.333671 -0.0835073) and LINESTRING (0.330465 -0.0842769, 0.328225 -0.0848146) at 0.32965918719530368 -0.084470389572422672. Calls: st_intersection ... st_intersection -&gt; st_intersection.sfc -&gt; CPL_nary_intersection However, with zero precision and a buf_size of 0.7 we will not get this error. n = 12 # n points, equally spread along unit circle: pts = (1:n)/n * 2 * pi xy = st_as_sf(data.frame(x = cos(pts), y = sin(pts)), coords = c(&quot;x&quot;, &quot;y&quot;)) buf_size = 0.8 precision = 1000 b = st_buffer(xy, buf_size) i = st_intersection(st_set_precision(b, precision)) par(mar = rep(0, 4)) plot(i[1], col = sf.colors(nrow(i), categorical = TRUE)) all(st_is_valid(i)) #&gt; [1] TRUE Figure 5.4: n-ary intersection that may lead to invalid geometries 5.6 Warnings for longitude/latitude geometries When working on geodetic coordinates (degrees longitude/latitude), package sf gives warnings when it makes the assumption that coordinates are Cartesian, e.g. in i = st_intersects(nc[1,], nc[2,]) #&gt; although coordinates are longitude/latitude, st_intersects assumes that they are planar In many cases, making this assumption is not a problem. It might be a problem when we have polygons that cover very large areas, cover North or South pole, or have lines crossing or polygons covering the dateline. References "],
["featureattributes.html", "Chapter 6 Feature attributes 6.1 Attribute-geometry relationships 6.2 Spatial join 6.3 Aggregate and summarise 6.4 Intersections 6.5 Area-weighted interpolation 6.6 Exercises", " Chapter 6 Feature attributes Feature attributes refer to the properties of features (“things”) that do not describe the feature’s geometry. Feature attributes can be derived from geometry (e.g. length of a LINESTRING, area of a POLYGON) but they can also refer to completely different properties, such as the name of a street or a county, the number of people living in a country, the type of a road the soil type in a polygon from a soil map. the opening hours of a shop the body weight of an animal the NO\\(_2\\) concentration measured at an air quality monitoring station Although temporal properties of features are no less fundamental than their spatial properties, the simple feature access standard and consequently the sf package does not give time a similar role as space; more on that in chapter 4. Most sf objects will contain both geometries and attributes for features. The geometric operations described in the previous chapter (5) operate on geometries only, and may occasionally add attributes, but will not modify attributes present. In all these cases, attribute values remain unmodified. At first sight, that looks rather harmless. But if we look into a simple case of replacing a county boundary with a county centroid, as in library(sf) library(dplyr) system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32119) %&gt;% select(BIR74, SID74, NAME) %&gt;% st_centroid() %&gt;% head(n = 1) -&gt; x # save as x #&gt; Warning in st_centroid.sf(.): st_centroid assumes attributes are constant #&gt; over geometries of x st_geometry(x)[[1]] #&gt; POINT (385605 3e+05) we receive a warning. This warning is justified for the first two variables shown (total births and number of SID disease cases, 1974) which, as such, are not associated with a feature whose geometry is POINT (385605.4 300303.5). The third variable, NAME is however still the county name for the point indicated, but the point geometry no longer is the county geometry. 6.1 Attribute-geometry relationships Changing the feature geometry without changing the feature attributes does change the feature, since the feature is characterised by the combination of geometry and attributes. Can we, ahead of time, predict whether the resulting feature will still meaningfully relate to the attribute data when we replace all geometries for instance with their convex hull or centroid? It depends. Take the example of a road, represented by a LINESTRING, which has an attribute property road width equal to 10 m. What can we say about the road width of an arbitray subsectin of this road? That depends on whether the attribute road length describes, for instance the road width everywhere, meaning that road width is constant along the road, or whether it describes an aggregate property, such as minimum or average road width. In case of the minimum, for an arbitrary subsection of the road one could still argue that the minimum road with must be at least as large as the minimum road width for the whole segment, but it may no longer be the minimum for that subsection. This gives us two “types” for the attribute-geometry relationship (AGR): constant the attribute value is valid everywhere in or over the geometry aggregate the attribute is an aggregate, a summary value over the geometry For polygon data, typical examples of constant AGR are land use for a land use polygon rock units or geologic strata in a geological map soil type in a soil map elevation class in a elevation map that shows elevation as classes climate zone in a climate zone map Typical examples for the aggregate AGR are population, either as number of persons or as population density other socio-economic variables, summarised by area total emission of pollutants by region block mean NO\\(_2\\) concentrations, as e.g. obtained by block kriging or a dispersion model that predicts areal means A third type of AGR is that where an attribute identifies a feature geometry. The example above is county NAME: the name identifies the county, and is still the county NAME for any sub-area. identity the attribute value uniquely identifies the geometry as a whole, there are no other geometries with the same value Arbitrary sub-areas will lose the identity property but becomes a constant attribute. An example is: any point inside a county is still part of the county and must have the same value for county name, but it does not longer represent the (entire) geometry corresponding to that county. We can specify the AGR of an attribute in an sf object by st_set_agr: nc &lt;- system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32119) nc1 &lt;- nc %&gt;% select(BIR74, SID74, NAME) %&gt;% st_set_agr(c(BIR74 = &quot;aggregate&quot;, SID74 = &quot;aggregate&quot;, NAME = &quot;identity&quot;)) This helps to get rid of warnings that a particular attribute is assumed to be constant over a geometry, if it already is. The following no longer generates a warning nc1 %&gt;% select(NAME) %&gt;% st_centroid() %&gt;% head(1) #&gt; Simple feature collection with 1 feature and 1 field #&gt; Attribute-geometry relationship: 1 constant, 0 aggregate, 0 identity #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 386000 ymin: 3e+05 xmax: 386000 ymax: 3e+05 #&gt; epsg (SRID): 32119 #&gt; proj4string: +proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; # A tibble: 1 x 2 #&gt; NAME geom #&gt; &lt;chr&gt; &lt;POINT [m]&gt; #&gt; 1 Ashe (385605 3e+05) and also changes AGR for NAME from identity to constant when replacing the geometry with the geometry’s centroid: nc1 %&gt;% select(NAME) %&gt;% st_centroid() %&gt;% st_agr() #&gt; NAME #&gt; constant #&gt; Levels: constant aggregate identity Identifying attribute-geometry relationships, and warning against their absence is a first and simple implementation of the notion that the types of phenomena we encounter in spatial data science (like objects, fields, and aggregations) are not identified by their geometrical representations (points, lines, polygons, rasters). Making the wrong assumptions here easily leads to meaningless analysis results (Stasch et al. 2014,Scheider et al. (2016)). 6.2 Spatial join Spatial joins are similar to regular (left or inner) joins, where the join criterion is not equality of one or more fields, but a spatial predicate, such as that two records have intersecting geometries. As an example, we can create a join between two tables, a = st_sf(a = 1:2, geom = st_sfc(st_point(c(0,0)), st_point(c(1,1)))) b = st_sf(b = 3:4, geom = st_sfc(st_linestring(rbind(c(2,0), c(0,2))), st_point(c(1,1)))) st_join(a, b) #&gt; Simple feature collection with 3 features and 2 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; a b geom #&gt; 1 1 NA POINT (0 0) #&gt; 2 2 3 POINT (1 1) #&gt; 2.1 2 4 POINT (1 1) st_join(a, b, left = FALSE) #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 1 xmax: 1 ymax: 1 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; a b geom #&gt; 2 2 3 POINT (1 1) #&gt; 2.1 2 4 POINT (1 1) st_join(b, a) #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 0 xmax: 2 ymax: 2 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; b a geom #&gt; 1 3 2 LINESTRING (2 0, 0 2) #&gt; 2 4 2 POINT (1 1) We see that unless left = FALSE, we get all elements (and geometries) from the first argument, augmented with fields of the second argument when geometries match. The example shows the case where there are two geometries matching to point (1,1). The spatial join predicate function can be freely chosen, e.g. from the binary predicates listed in section 5.1.2. When we match two sets of polygons, it may be a bit of a mess to go through all the many matches. One way out of this is to only provide the match with the largest overlap with the target geometry, obtained by adding argument largest = TRUE. An example of this is shown (visually) in figure 6.1. Figure 6.1: example of st_join with largest = TRUE: the label of the polygon in the top figure with the largest intersection with polygons in the bottom figure is assigned to the polygons of the bottom figure 6.3 Aggregate and summarise Package sf provides sf methods for stats::aggregate and dplyr::summarise. Both do essentially the same: given a grouping predicate (for summarise, obtained from group_by) given an aggregation function aggregate the selected attributes using this function, per group aggregate in addition the geometries. if do_union is TRUE (the default), union the aggregated geometries. Unioning aggregated geometries dissolves for instance internal polygon boundaries, which otherwise would lead to invalid MULTIPOLYGON errors in subsequent analysis, or plotting of potentially unwanted internal polygon boundaries. Figure 6.2 illustrates this. Figure 6.2: left: invalid MULTIPOLYGON with two external rings with common boundary, right: valid POLYGON obtained after unioning the geometry left 6.4 Intersections Suppose we have two datasets with different geometries and attributes (left figure 6.3), and we want to compute their intersections: p1 = st_polygon(list(rbind(c(0,0), c(4,0), c(4,4), c(0,4), c(0,0)))) d1 = st_sf(a = c(3,1), geom = st_sfc(p1, p1 + c(4, 0))) d2 = st_sf(b = c(4), geom = st_sfc(p1 * .75 + c(3, 2))) What will the intersection of these two objects give? (i = st_intersection(d1, d2)) #&gt; Warning: attribute variables are assumed to be spatially constant #&gt; throughout all geometries #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 3 ymin: 2 xmax: 6 ymax: 4 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; a b geom #&gt; 1 3 4 POLYGON ((3 4, 4 4, 4 2, 3 ... #&gt; 2 1 4 POLYGON ((4 2, 4 4, 6 4, 6 ... plot(d1, xlim = c(0,8), ylim = c(0, 6), col = NA, border = 1, reset = FALSE) plot(d2, col = NA, border = &#39;red&#39;, add = TRUE, lwd = 2) plot(d1, xlim = c(0,8), ylim = c(0, 6), col = NA, border = 1, lwd = 2, reset = FALSE) plot(d2, col = NA, border = &#39;red&#39;, add = TRUE, lwd = 3) plot(st_geometry(i), add = TRUE, col = grey(c(.7,.9)), , border = &#39;green&#39;, lwd = 1) Figure 6.3: left: overlapping geometries (d2: red); right: intersection areas (i: grey) As we see, this gives the areas of intersection, along with the corresponding attributes for both contributing objects, and a warning that attributes were assumed to be spatially constant. Although this may be convenient in some cases, it may be entirely meaningless in others. For instance, in case attribute b in object d2 represents the number of people living in d2, then after the intersection we end up with twice as many people living over a smaller area. As seen in section 5.5, computing intersections easily leads to errors caused by invalid geometries. Setting precision (section 5.4) may prevent this. 6.5 Area-weighted interpolation Suppose we want to combine geometries and attributes of two datasets such, that we get attribute values of the first datasets summarised for the geometries of the second. There are various ways we can go for this. The simples one, building on the previous example, would be to obtain for the geometry of d2 the attribute of d1 that has the largest overlap with d2. This is obtained by st_join(d2, d1, largest = TRUE) #&gt; Warning: attribute variables are assumed to be spatially constant #&gt; throughout all geometries #&gt; Simple feature collection with 1 feature and 2 fields #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 3 ymin: 2 xmax: 6 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; b a geom #&gt; 1 4 1 POLYGON ((3 2, 6 2, 6 5, 3 ... Another option would be to summarise the attribute, e.g. taking its mean, regardless the amount of overlap. This is obtained by aggregate(d1, d2, mean) #&gt; Simple feature collection with 1 feature and 1 field #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 3 ymin: 2 xmax: 6 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; a geometry #&gt; 1 2 POLYGON ((3 2, 6 2, 6 5, 3 ... A third option is to apply area-weighted interpolation, meaning that we interpolate (average) the variable by taking into account the respective area contributions of overlap (Goodchild and Lam 1980,Do, Thomas-Agnan, and Vanhems (2015a),Do, Thomas-Agnan, and Vanhems (2015b)). This is done e.g. by d3 = st_sfc(p1 * .75 + c(3, 2), p1 * .75 + c(3,3)) st_interpolate_aw(d1, d3, extensive = FALSE)$a #&gt; Warning in st_interpolate_aw(d1, d3, extensive = FALSE): st_interpolate_aw #&gt; assumes attributes are constant over areas of x #&gt; [1] 1.67 1.67 st_interpolate_aw(d1, d3, extensive = TRUE)$a #&gt; Warning in st_interpolate_aw(d1, d3, extensive = TRUE): st_interpolate_aw #&gt; assumes attributes are constant over areas of x #&gt; [1] 0.625 0.312 6.5.1 Spatially intensive and extensive variables The difference between the two examples for area-weighted interpolation is how the final weighted sum (value times area of intersection) is normalised: by the target area (extensive), or by the sum of the area covered (intensive, extensive = FALSE). Spatially intensive variables are variables for which the value, when we split an area, does not principally change. An example might be temperature, elevation, or population density. Spatially extensive variables are variables for which the value is also split, according to the area. Examples are population (amount), or area. 6.6 Exercises Add a variable to the nc dataset by nc$State = &quot;North Carolina&quot;. Which value should you attach to this variable for the attribute-geometry relationship (agr)? Create a new sf object from the geometry obtained by st_union(nc), and assign &quot;North Carolina&quot; to the variable State. Which agr can you now assign to this attribute variable? Use st_area to add a variable with name area to nc. Compare the area and AREA variables in the nc dataset. What are the units of AREA? Are the two linearly related? If there are discrepancies, what could be the cause? Is the area variable intensive or extensive? Is its agr equal to constant, identity or aggregate? Find the name of the county that contains POINT(-78.34046 35.017) Find the names of all counties with boundaries that touch county Sampson. List the names of all counties that are less than 50 km away from county Sampson. References "],
["rs.html", "Chapter 7 Reference Systems 7.1 Units of measurement 7.2 Temporal Reference Systems 7.3 Coordinate Reference Systems", " Chapter 7 Reference Systems “Data are not just numbers, they are numbers with a context”; “In data analysis, context provides meaning” (Cobb and Moore 1997) 7.1 Units of measurement 7.1.1 Quantities The VIM (International vocabulary of metrology, BIPM et al. (2012)) defines a quantity as a “property of a phenomenon, body, or substance, where the property has a magnitude that can be expressed as a number and a reference”, where “[a] reference can be a measurement unit, a measurement procedure, a reference material, or a combination of such.” One could argue whether all data is constitued of quantities, but there is no need to argue that proper data handling requires that numbers are accompanied by information on what the numbers mean, and what they are about. A measurement system consist of base units for base quantities, and derived units for derived quantities. The SI system of units (Bureau International des Poids et Mesures 2006) consist of the seven base units length (metre, m), mass (kilogram, kg), time (second, s), electric current (ampere, A), thermodynamic temperature (kelvin, K), amount of substance (mole, mol), and luminous intensity (candela, cd). Derived units are composed of products of integer powers of base units; exampes are speed (\\(\\mbox{m}~\\mbox{s}^{-1}\\)) and density (\\(\\mbox{kg}~\\mbox{m}^{-3}\\)). Many data variables have units that are not expressed as SI base units or derived units. Hand (2004) discusses many such measurement scales, e.g. those used to measure intelligence in social sciences, in the context of measurement units. 7.1.2 Unitless measures The special case of unitless units can refer to either cases where units cancelled out (e.g. mass fraction: kg/kg, or angle measured in rad: m/m) or to cases where objects or events were counted (e.g. 5 apples). Adding an angle to a count of apples would not make sense; adding 5 apples to 3 oranges may make sense if the result is reinterpreted, e.g. as pieces of fruit. Flater (2018) discusses systems for proper handling of unitless quantities; handling counts could for instance link to domain-specific ontologies pointing out which things were counted, and perhaps identifying super-classes, like fruit. 7.1.3 Units in R The units R package (Pebesma, Mailund, and Hiebert 2016b) provides units of measurement support for R, by interfacing the udunits2 units database and C library. It allows for setting, converting and deriving units: library(units) (a = set_units(1:3, m)) #&gt; Units: [m] #&gt; [1] 1 2 3 a_km = set_units(1:3, km) a + a_km #&gt; Units: [m] #&gt; [1] 1001 2002 3003 b = set_units(4:6, s) a / b #&gt; Units: [m/s] #&gt; [1] 0.25 0.40 0.50 and raises errors in case of meaningless operations a + b #&gt; Error: cannot convert s into m 7.1.4 Datum For many quantities, the natural origin of values is zero. This works for amounts, and differences between amounts results in meaningful negative values. For locations and times, differences have a natural zero interpretation: length and duration. Absolute location (position) and time need a fixed origin, from which we can meaningfully measure other absolute space-time points: a datum. For space, a datum involves more than one dimension. The combination of a datum and a measurement unit (scale) is a a reference system. The next two sections will deal with temporal and spatial reference systems, and how they are handled in R. 7.2 Temporal Reference Systems R has two native classes for time-related data: POSIXt and Date, which are used for specifying dates, and times. 7.2.1 Date Date objects are numeric vectors of class Date, which contain the number of days since (or in case negative: before) Jan 1, 1970: (d = as.Date(&quot;1970-02-01&quot;)) #&gt; [1] &quot;1970-02-01&quot; as.numeric(d) #&gt; [1] 31 We see that the print method as well as the as.Date method use ISO 8601 (ISO8601 2000) character strings, which is standard used to read and write dates. We can also modify this to local conventions by specifying a format: (d = as.Date(&quot;01.02.1970&quot;, format = &quot;%d.%m.%Y&quot;)) #&gt; [1] &quot;1970-02-01&quot; format(d, format = &quot;%d.%m.%Y&quot;) #&gt; [1] &quot;01.02.1970&quot; The default for format may depend on the locale settings of the computer used. The help page of ?as.Date contains further discussion of date systems, and calendars used. 7.2.2 POSIXt POSIXt is an R native class for specifying times. It has two subclasses: POSIXct represents time as a numeric, representing decimal seconds since 1970-01-01 00:00 UTC, and POSIXlt contains the same information as a list with all time components (second, minute, hour, day of month, month, year) in list components: t = as.POSIXct(&quot;1970-01-01 01:00:00&quot;, tz = &quot;UTC&quot;) as.numeric(t) #&gt; [1] 3600 names(unclass(as.POSIXlt(t))) #&gt; [1] &quot;sec&quot; &quot;min&quot; &quot;hour&quot; &quot;mday&quot; &quot;mon&quot; &quot;year&quot; &quot;wday&quot; &quot;yday&quot; &quot;isdst&quot; unclass(as.POSIXlt(t))$hour #&gt; [1] 1 7.2.3 Time zones Time zones can be seen as local modifiers of time: where time as numeric value is stored with respect to UTC (universal coordinated time), a local time zone is used to format it, and a time zone can be specified for creation, and formatting: (t = as.POSIXct(&quot;1970-01-01 00:00:00&quot;, tz = &quot;PST&quot;)) #&gt; [1] &quot;1970-01-01 PST&quot; this adds a time zone modifier to t that redefines the time origin, as as.numeric(t) #&gt; [1] 0 To convert POSIXt to Date we can use as.Date; this converts to the local date. Converting back to POSIXct looses the time of day and time zone information. (t = as.POSIXct(&quot;1970-01-01 23:00:00&quot;, tz = &quot;PST&quot;)) #&gt; [1] &quot;1970-01-01 23:00:00 PST&quot; as.Date(t) #&gt; [1] &quot;1970-01-01&quot; format(as.POSIXct(as.Date(t)), tz = &quot;UTC&quot;) #&gt; [1] &quot;1970-01-01&quot; Working with local time zones is sometimes confusing when the data we work with were not referenced to this time zone. It may help to set Sys.setenv(TZ=&quot;UTC&quot;) at the start of an R script. The effect is, at lease on some platforms, that R thinks it is working in a UTC time zone. This way, the scripts will produce identical outputs, no matter in which time zone it is run. 7.3 Coordinate Reference Systems We follow Lott (2015) when defining the following concepts (italics indicate literal quoting): a coordinate system is a set of mathematical rules for specifying how coordinates are to be assigned to points a datum is a parameter or set of parameters that define the position of the origin, the scale, and the orientation of a coordinate system, a geodetic datum is a datum describing the relationship of a two- or three-dimensional coordinate system to the Earth, and a coordinate reference system is a coordinate system that is related to an object by a datum; for geodetic and vertical datums, the object will be the Earth. A readable text that further explains these concepts is Iliffe and Lott (2008). Essentially it boils down to the Earth not following a regular shape. The topography of the Earth is of course known to vary strongly, but also the surface formed by constant gravity at mean sea level, the geoid, is irregular. A commonly used model that is fit to the geoid is an ellipsoid of revolution, which is an ellipse with two identical minor axes. This model can be fit locally to be highly precise, can be fixed for particular tectonic plates (like ETRS89), or can be globally fit (like WGS84). The definitions above state that coordinates in degrees longitude and latitude can only have a meaning, i.e. can only be understood as Earth coordinates when the datum they relate to is given. Recomputing coordinates in a new datum is called coordinate transformation. 7.3.1 Projections When we look at geographical data on a paper map or a screen, or on any flat device, we see the values projected – they are no longer arranged on an a sphere or ellipsoid. Even if we plot degrees longitude/latitude data on a flat x/y plane with unit aspect ratio, we use a projection, called plate carrée. Note that even for projected data, the data that were projected are associated with a reference ellipsoid (datum). Going from one projection to the other without changing datum is called coordinate conversion, and usually passes through the geodetic coordinates of the datum involved; up to numerical errors this process is lossless and invertible. 7.3.2 Describing Coordinate Reference Systems Lott (2015) describes a standard for encoding coordinate reference system using well known text; the standard is referred to as WKT2. GDAL and PROJ support this encoding (FIXME: verify this is true by the time this book goes into print). Traditionally, PROJ used a string representation to encode coordinate reference systems (datums) and projections, called the proj4string. Some of these come from a catalogue (originally) compiled by the European Petroleum Survey Group (now: International Association of Oil &amp; Gas Producers), and have a so-called epsg code. Package sf provides a crs class which is initialised either by an epsg code, like st_crs(4326) #&gt; Coordinate Reference System: #&gt; EPSG: 4326 #&gt; proj4string: &quot;+proj=longlat +datum=WGS84 +no_defs&quot; or by a PROJ string, like st_crs(&quot;+proj=longlat&quot;) #&gt; Coordinate Reference System: #&gt; EPSG: 4326 #&gt; proj4string: &quot;+proj=longlat +ellps=WGS84 +no_defs&quot; and can be missing valued st_crs() #&gt; Coordinate Reference System: NA A number of methods are available for crs objects: methods(class = &quot;crs&quot;) #&gt; [1] $ is.na Ops print st_as_text st_crs #&gt; see &#39;?methods&#39; for accessing help and source code The Ops methods are convenience functions, e.g. st_crs(4326) == st_crs(&quot;+proj=longlat&quot;) #&gt; [1] FALSE but there not all cases semantically identical crs objects will yield equality in this test. st_as_text converts a crs object into WKT, we print it using cat: cat(st_as_text(st_crs(4326), pretty = TRUE)) #&gt; GEOGCS[&quot;WGS 84&quot;, #&gt; DATUM[&quot;WGS_1984&quot;, #&gt; SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, #&gt; AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], #&gt; AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], #&gt; PRIMEM[&quot;Greenwich&quot;,0, #&gt; AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], #&gt; UNIT[&quot;degree&quot;,0.0174532925199433, #&gt; AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], #&gt; AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] It should be noted that at the time of writing this, a new draft standard for WKT (informally called WKT2, Lott (2015)) is rapidly being implemented in GDAL and PROJ, and can be expected in R once these changes appear in released versions. st_crs is also a generic, with methods for methods(st_crs) #&gt; [1] st_crs.bbox* st_crs.character* st_crs.crs* #&gt; [4] st_crs.default* st_crs.numeric* st_crs.Raster* #&gt; [7] st_crs.sf* st_crs.sfc* st_crs.Spatial* #&gt; [10] st_crs.stars* #&gt; see &#39;?methods&#39; for accessing help and source code The method for sfc objects can drill further into the underlying data, by adding an argument; a few of these are printed by st_crs(st_sfc(crs = 4326), parameters = TRUE)[c(1:4, 8)] #&gt; $SemiMajor #&gt; 6378137 [m] #&gt; #&gt; $SemiMinor #&gt; 6356752 [m] #&gt; #&gt; $InvFlattening #&gt; [1] 298 #&gt; #&gt; $units_gdal #&gt; [1] &quot;degree&quot; #&gt; #&gt; $ud_unit #&gt; 1 [°] where we see that udunits and GDAL units are integrated. The major axis lengths (SemiMajor) and inverse flattening are used e.g. to compute great circle distances on the ellipsoid, using the algorithm from Karney (2013). This algorithm is implemented in PROJ, and interfaced by lwgeom::st_geod_distance, which is called from sf::st_distance when objects have geodetic coordinates. References "],
["plotting.html", "Chapter 8 Plotting spatial data 8.1 Every plot is a projection 8.2 Plotting points, lines, polygons, grid cells 8.3 Class intervals 8.4 Poles and datelines 8.5 Graticules and other navigation aids", " Chapter 8 Plotting spatial data Together with timelines, maps belong to the most powerful graphs, perhaps because we can immediately relate where we are, or have been, on the space of the plot. Two recent books on visualisation (Healy 2018, Wilke (2019)) contain chapters on visualising geospatial data or maps. Here, we will not try to preach the do’s and don’ts of maps, but rather point out a number of possibilities how to do things, point out challenges along the way and ways to mitigate them. 8.1 Every plot is a projection The world is round, but plotting devices are flat. As mentioned in section 7.3.1, any time we visualise, in any way, the world on a flat device, we project: we convert angular, geodetic coordinates into Cartesian coordinates. This includes the cases where we think we “do nothing” (figure 8.1, left), or where show the world “as it is”, e.g. as seen from space (figure 8.1, right). Figure 8.1: Earth country boundaries; left: mapping long/lat to x and y; right: as seen from space The left plot of figure 8.1 was obtained by library(sf) library(rnaturalearth) w &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) plot(st_geometry(w)) and we see that this is the default projection for data with geodetic coordinates, as indicated by st_crs(w) #&gt; Coordinate Reference System: #&gt; EPSG: 4326 #&gt; proj4string: &quot;+proj=longlat +datum=WGS84 +no_defs&quot; The projection taken here is the equirectangular (or equidistant cylindrical) projection, which maps longitude and latitude linear to the x and y axis, keeping an aspect ratio of 1. Were we to do this for smaller areas not on the equator, it makes sense to choose a plot ratio such that one distance unit E-W equals one distance unit N-S on the center of the plotted area. We can also carry out this projection before plotting. Say we want to do this for Germany, then after loading the (rough) country outline, we use st_transform to project: DE = st_geometry(ne_countries(country = &quot;germany&quot;, returnclass = &quot;sf&quot;)) DE.eqc = st_transform(DE, &quot;+proj=eqc +lat_ts=51.14 +lon_0=90w&quot;) st_transform takes an sf or sfc object, and as second argument the projection. This can either be a number of a known EPSG projection, e.g. listed at http://spatialreference.org/ref/epsg/ , or a string describing the projection (+proj=...) with further parameters. The parameter here is lat_ts, the latitude of true scale (i.e., one length unit N-S equals one length unit E-W), which was here chosen as the middle of the bounding box latitudes mean(st_bbox(DE)[c(&quot;ymin&quot;, &quot;ymax&quot;)]) #&gt; [1] 51.1 When we now plot both maps (figure 8.2), they look the same up to their values along the axes: degrees for geodetic (left), and metres for Cartesian coordinates. par(mfrow = c(1, 2)) plot(DE, axes = TRUE) plot(DE.eqc, axes = TRUE) Figure 8.2: Germany in equidistant cylindrical projection: left with degrees, right with metres along the axes 8.1.1 What is a good projection for my data? There is unfortunately no silver bullet here. Projections that maintain all distances do not exist; only globes do. The mostly used projections try to preserve areas (equal area), directions (conformal, e.g. Mercator), some properties of distances (e.g. equirectangular preserves distances along meridians, azimuthal equidistant preserves distances to a central point) or some compromise of these. Parameters of projections decide what is shown in the center of a map and what on the fringes, which areas are up and which are down, and which areas are most enlarged. All these choices are in the end political decisions. It is often entertaining and at times educational to play around with the different projections and understand their consequences. When the primary purpose of the map however is not to entertain or educate projection varieties, it may be preferrable to choose a well-known or less surprising projection, and move the discussion which projection should be preferred to a decision process on its own. 8.1.2 Does projection always work? No. Look for instance at the figure 8.1, right. Countries like the USA are half out-of-sight. Where is the California coast line drawn? The PROJ string used here was &quot;+proj=ortho +lat_0=30 +lon_0=-10&quot; and we can easily check what happens to a polygon that crosses the visible area by setting both parameters to 0: sq = rbind(c(-89,0), c(-89,1), c(-91,1), c(-91,0), c(-89,0)) pol = st_sfc(st_polygon(list(sq)), crs = 4326) (pol.o = st_transform(pol, &quot;+proj=ortho +lat_0=0 +lon_0=0&quot;))[[1]] #&gt; POLYGON ((-6377166 0, -6376194 111314, -6377166 0)) st_is_valid(pol.o, NA_on_exception=FALSE) #&gt; Error in CPL_geos_is_valid(st_geometry(x), as.logical(NA_on_exception)): Evaluation error: IllegalArgumentException: Invalid number of points in LinearRing found 3 - must be 0 or &gt;= 4. where we see that the polygon is not nicely cut along the visibility line, but that the invisible points are simply dropped. This leads in this case to an invalid geometry, and may in the case of 8.2 lead to straight lines that do not follow the map border circle. How was figure 8.2 created? By using a rather ugly script that used a projected half-sphere circle to first cooky-cut the part of the countries that would remain visible on this projection. The script is available, and so is its output. 8.2 Plotting points, lines, polygons, grid cells Since maps are just a special form of plots of statistical data, the usual rules hold. Frequently occuring challenges include: polygons may be very small, and vanish when plotted depending on the data, polygons for different features may well overlap, and be visible only partially; using transparent fill colors may help indentify them when points are plotted with symbols, they may easily overlap and be hidden; density maps (chapter 13) may be more helpful lines may be hard to read when coloured and may overlap regardless line width When plotting polygons filled with colors, one has the choice to plot polygon boundaries, or to suppress these. If polygon boundaries draw too much attention, an alternative is to colour them in a grey tone, or another color that doesn’t interfere with the fill colors. When suppressing boundaries entirely, polygons with (nearly) identical colors will melt together. If the property indicating the fill color is constant over the region, such as land cover type, this is OK. If the property is an aggregation, the region over which it was aggregated gets lost. Especially for extensive variables, e.g. the amount of people living in a polygon, this strongly misleads. But even with polygon boundaries, using filled polygons for such variables may not be a good idea. The use of continuous color scales for continuously varying variables may look attractive, but is often more fancy than useful: it impracticle to match a color on the map with a legend value colors ramps often stretch non-linearly over the value range Only for cases where the identification of values is less important than the continuity of the map, such as the coloring of a high resolution digital terrain model, it does serve its goal. 8.3 Class intervals When plotting continuous geometry attributes using a limited set of colors (or symbols), classes need to be made from the data. The R package classInt (Bivand 2018a) provides a number of methods to do so. Using it is quite simple: library(classInt) r = rnorm(100) classIntervals(r) #&gt; style: quantile #&gt; one of 1.49e+10 possible partitions of this variable into 8 classes #&gt; [-2.61,-1.26) [-1.26,-0.356) [-0.356,-0.131) [-0.131,0.091) #&gt; 13 12 13 12 #&gt; [0.091,0.433) [0.433,0.623) [0.623,1.11) [1.11,2.76] #&gt; 12 13 12 13 classIntervals(r)$brks #&gt; [1] -2.612 -1.257 -0.356 -0.131 0.091 0.433 0.623 1.113 2.755 and it takes argument n for the number of intervals, and a style that can be one of “fixed”, “sd”, “equal”, “pretty”, “quantile”, “kmeans”, “hclust”, “bclust”, “fisher”, or “jenks”. Style “pretty” may not obey n; if if n is missing, ‘nclass.Sturges’ is used; two other methods are available for choosing n automatically. 8.4 Poles and datelines Given the linestring (ls = st_sfc(st_linestring(rbind(c(-179.5, 52), c(179.5, 52))), crs = 4326)) #&gt; Geometry set for 1 feature #&gt; geometry type: LINESTRING #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: 52 xmax: 180 ymax: 52 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; LINESTRING (-180 52, 180 52) How long a distance does it span? Let’s see: st_length(ls) #&gt; 68677 [m] which seems sensible. But does ls actually intersect with the dateline? dateline = st_sfc(st_linestring(rbind(c(180, 51), c(180, 53))), crs = 4326) st_intersects(ls, dateline) #&gt; although coordinates are longitude/latitude, st_intersects assumes that they are planar #&gt; Sparse geometry binary predicate list of length 1, where the predicate was `intersects&#39; #&gt; 1: (empty) … it seems not? How can this be? The warning said it all: if ls is not in spherical coordinates, it means it follows the 52th parallel, crossing (0, 52) half way. This is as if we drew a straight line between the two points on the left figure of 8.1, almost across the complete 52N parallel. Where do these inconsistencies come from? The software sf is built upon (see the C/C++ libraries box in figure 1.3) is a GIS software stack that originally targeted flat, 2D geometries. The simple feature standard assumes straight lines between points, but great circle segments are not straight. The functions that deal with spherical geometry, such as st_length, use PostGIS extensions in liblwgeom that were added later on to PostGIS, without rewriting the entire geometry core for geodetic coordinates. More recent systems, including Google’s S21, BigQuery GIS2 and Ubers H33 were written from scratch with global data in mind, and work exclusively with geodetic coordinates. 8.4.1 st_wrap_dateline The st_wrap_dateline function can be convenient, (ls.w = st_wrap_dateline(ls))[[1]] #&gt; MULTILINESTRING ((-180 52, -180 52), (180 52, 180 52)) as it cuts any geometry crossing the dateline into MULTI-geometries of which the sub-geometries touch on, but no longer cross the dateline. This is in particular convenient for plotting geodetic coordinates using naive approaches such as that of figure 8.1 left, where they would have crossed the entire plotting area. Note that by cutting the line at (180,52), st_wrap_dateline does not follow a great circle; for this, it should be preceded by st_segmentize, as e.g. in (ls.w2 = st_wrap_dateline(st_segmentize(ls, units::set_units(30, km))))[[1]] #&gt; MULTILINESTRING ((-180 52, -180 52, -180 52, -180 52), (180 52, 180 52, 180 52)) Also note that bounding boxes like st_bbox(ls.w) #&gt; xmin ymin xmax ymax #&gt; -180 52 180 52 simply take the coordinate ranges, and are pretty much meaningless as descriptors of the extent of a geometry for geometries that cross the dateline. Similar notions hold for the poles; a polygon enclosing the North pole pole = st_sfc(st_polygon(list(rbind(c(0,80), c(120,80), c(240,80), c(0,80)))), crs = 4326) does not include the pole st_intersects(pole, st_sfc(st_point(c(0,90)), crs = 4326)) #&gt; although coordinates are longitude/latitude, st_intersects assumes that they are planar #&gt; Sparse geometry binary predicate list of length 1, where the predicate was `intersects&#39; #&gt; 1: (empty) (Cartesian interpretation) but has a positive area st_area(pole) #&gt; 1.63e+12 [m^2] indicating again a geodetic interpretation. 8.5 Graticules and other navigation aids Graticules are lines on a map that follow constant latitude or longitude values. On figure 8.1 left they are drawn in grey. Graticules are often drawn in maps to give reference where something is. In our first map in figure 1.1 we can read that the area plotted is near 35\\(^o\\) North and 80\\(^o\\) West. Had we plotted the lines in the projected coordinate system, they would have been straight and their actual numbers would not have been very informative, apart from giving an interpretation of size or distances when the unit is known, and familiar to the map reader. Graticules, by that, also shed light on which projection was used: equirectangular or Mercator projections will have straight vertical and horizontal lines, conic projections have straight but diverging meridians, equal area may have curved meridians The real navigation aid on figure 8.1 and most other maps are geographical features like the state outline, country outlines, coast lines, rivers, roads, railways and so on. If these are added sparsely and sufficiently, graticules can as well be omitted. In such cases, maps look good without axes, tics, and labels, leaving up a lot of plotting space to be filled with actual map data. References "],
["plot.html", "Chapter 9 Base and grid plots 9.1 Base plots 9.2 Combining base plots 9.3 Grid plots and viewports", " Chapter 9 Base and grid plots With base plots we mean the plot methods as offered by base R. Higher-level plots created with ggplot2, which are built on top of the grid package, are discussed in chapter 10. 9.1 Base plots The nice thing about base plots is that they work relatively simple, and can be built incrementally: after plotting a first element, it is possible to add further elements, like titles, axes, legends, annotations, and so on. Making more complex plot such as faceted plots is more of a challenge with base plot. They may also be faster than e.g. ggplot2. This chapter focuses on the base plot methods for sf and stars objects, and in particular where they deviate from what one expects from base R plots: default colors, color key placement, and multiple maps. 9.1.1 plot.sf defaults When we plot an sf object with multiple attributes, we get to see multiple attributes, as shown in figure 9.1; the warning indicates that the number of attributes plotted has been limited (max.plot), that by default no key is shown when multiple attributes are plotted, and that factor or character columns are plotted with a categorical scale, and numeric variables by a continuous color scale. system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf -&gt; nc plot(nc) #&gt; Warning: plotting the first 10 out of 14 attributes; use max.plot = 14 to #&gt; plot all Figure 9.1: default plot with multiple attributes When the attributes values have a common reference system it makes sense to plot a key, and this can be done by suppressPackageStartupMessages(library(dplyr)) nc %&gt;% select(SID74, SID79) %&gt;% plot(key.pos = 4) # 1: below; 4: right Figure 9.2: two attributes sharing a key 9.1.2 Controlling color, color breaks, key The color of each feature geometry, be it a point, line or polygon, can be controlled by passing a single value to argument col, or to pass a vector with colors of length equal to the number of features. In that case, one does not get an automatic key, since the mapping of values to the key is unclear. One can get further control over the key by specifying either of breaks, to one of the classInt::classIntervals styles (“fixed”, “sd”, “equal”, “pretty”, “quantile”, “kmeans”, “hclust”, “bclust”, “fisher”, or “jenks”), or to the numeric vector of (increasing) class break values, nbreaks to set the number of color breaks, and pal, to pass a function that generates a palette, e.g. rainbow or viridis::viridis. logz which causes legend values to be plotted as 10-powers at which controls the values plotted along the key key.pos plots the key beneath (1), left (2), over (3) or to the right (4) of the map(s), and is omitted if NULL. An example is shown in figure 9.3. plot(nc[&quot;SID74&quot;], logz = TRUE, pal = viridis::viridis, breaks = c(0,.5,1,1.5,2,2.5), at = c(0,.5,1,1.5,2,2.5), key.width = lcm(1.3), key.length = 1) Figure 9.3: controlling key color and breaks; log transform causes zero values to remain uncolored; custom key size parameters For factor variables, the key shows factor levels, and key.length and/or key.width may need to be further controlled to get them look good. 9.1.3 Incrementally adding plot elements We can add elements to maps without keys by simply adding add = TRUE. When a map has a key, the initial plot command needs to have reset = FALSE. The reason for this is as follows. When plotting a map with a key on the side, in base plot one needs to cut up the plotting region in a region for the map, and a region for the key, similar to using par(mfrow = c(1,2)). In order to not keep the plot region splitting active for subsequent, unrelated plots, it is removed before the plot function returns. This means that by default one cannot add elements to a plot. In case we want to add elements to a plot, we need to instruct plot not to reset, and then can add elements if we set add = TRUE, as shown in figure 9.4. plot(nc[&quot;SID74&quot;], pal = viridis::viridis, reset = FALSE, graticule = TRUE, axes = TRUE) plot(st_point(c(-81.498,36.434)), col = &#39;red&#39;, pch = 1, cex = 4, lwd = 3, add = TRUE) layout(matrix(1)) # manually reset the plotting region split-up Figure 9.4: adding plot elements to a map with a key; graticule and axes 9.1.4 plotting graticules and axes A graticule (section 8.5) is added if graticule = TRUE is set; figure @(fig:figadd) gives an example. Axes are by default omitted: they take space, and often other map elements, such as boundaries or coast lines, are sufficient for orientation. Axes can be added with axes = TRUE. They are given in values of the coordinate reference system of the data, unless a graticule is added, in which case they correspond to the graticule values. 9.1.5 plot.stars defaults The base plot method for stars objects follows a number of parameters that were also discussed above for plot.sf. These are: key.pos, logz, axes, reset, key.width, key.length nbreaks, and breaks. The default for breaks is &quot;quantile&quot;; along with the default join_zlim = TRUE this results in quantile values taken from all of the images shown in a composite plot to yeild color breaks. The result of this is shown in figure 4.1, the default stars plot for a multi-band raster. If join_zlim is FALSE, color breaks are computed separately for each subplot, and a joint legend is not possible, hence, no legend is drawn. For large datasets with more than 10000 pixels, a (regular) sample of size 10000 is taken to determine quantiles, rather than using the entire dataset. The col argument provides the pallette used, and not a color vector for each pixel; by default a linear grey scale is used. box_col is the color used for the boxes around subplots. With the default of downsample = TRUE, plot.stars does not many more pixels than can be seen on the plotting device. As shown in the left subfigure of 4.2, the rgb parameter can be used to specify three bands for creating rgb colors. maxColorValue, by default the maximum of all bands, can be used to specify the maximum pixel values for scaling pixel values into rgb components. The effect of setting text_values and interpolate are shown in figure 9.5 showing a 10 x 10 cell raster. text_values prints cell values as text, e.g. for numeric examples. interpolate interpolates rgb values, and seems to limit its extent to the raster cell centres, rather than corners. tif = system.file(&quot;tif/L7_ETMs.tif&quot;, package = &quot;stars&quot;) library(stars) x = read_stars(tif) par(mfrow = c(1, 2)) plot(x[,1:10,1:10,1], text_values=TRUE, key.pos = NULL, col = viridis::viridis(10), reset = FALSE) plot(x[,1:10,1:10,1:3], rgb=1:3, interpolate = TRUE, reset = FALSE) Figure 9.5: stars plots with text values (left) and interpolated rgb colors (right); both maps plot a 10 x 10 raster Some rasters cannot be plotted by R’s image, but have to be plotted as features (polygons or points); examples are rotated, sheared and curvilinear grids. Figure 9.6 shows a sheared grid, and illustrates st_as_sf for conversion to simple features, merge for whether to merge polygons with identical values, and as_points to plot raster cells as points. par(mfrow = c(1, 3)) xs = adrop(x[,1:10,1:10,1]) attr(attr(xs, &quot;dimensions&quot;), &quot;raster&quot;)$affine = c(1, 3) plot(xs, col = viridis::viridis(10), key.pos = NULL, reset = FALSE) plot(st_as_sf(xs, as_points = FALSE, merge = FALSE), pal = viridis::viridis, key.pos = NULL, reset = FALSE) plot(st_as_sf(xs, as_points = TRUE, merge = FALSE), key.pos = NULL, pal = viridis::viridis, pch = 16, reset = FALSE) Figure 9.6: sheared rasters, plotted as simple features; left: with merged polygon features, middle: with seperate polygons, right: as point features 9.2 Combining base plots Figure 9.6 is an exmaple of multiple plots of stars and sf objects in one plot. They could be combined because they lack the automatic legend key. The explanation about the need for parameter reset and the examples above with multiple subplots setting it to FALSE already show the limitations of this approach: if we want a key next to each map, we cannot easily combine maps in subplots, using sf‘s or stars’ plot methods. If we can do without the automatic legend, all is fine. A more flexible approach to combine maps and map elements into a composite is using package grid as shown in the next section, or ggplot facet plots (which also use grid) as will be shown in chapter 10 about ggplot2. 9.3 Grid plots and viewports Package grid, one of the R base packages, takes a more structured approach to building plots than base plot does. It allows the creation of graphic objects (objects of class grob, or grobs) that contain all the information for plotting, and the definition of viewports, plotting subregions within which coordinate systems can easily be redefined. Packages like ggplot2 (chapter 10) and lattice are built upon the logic provided by grid. Package sf contains st_as_grob methods for all feature geometry classes. Figure 9.7 shows a simple plot of all the nc counties drawn using grid functions. library(grid) system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf -&gt; nc st_viewport(nc) %&gt;% pushViewport st_geometry(nc) %&gt;% lapply(st_as_grob) %&gt;% lapply(grid.draw) -&gt; x Figure 9.7: simple plot created with grid functions The st_as_grob methods are exported by sf and used by ggplot2::geom_sf to convert geometries into plot-able objects; this way, ggplot2 needs no knowledge on how geometries are stored in R objects. "],
["ggplot2.html", "Chapter 10 ggplot2 10.1 geom_sf 10.2 using stars objects with ggplot2", " Chapter 10 ggplot2 Function ggplot from package ggplot2 (Wickham 2016) provides a high-level interface to creating graphs, essentially by composing all their ingredients and constraints in a single expression. It implements the “grammar for graphics” by Wilkinson (2006), and is the plotting package of choice in the tidyverse. Before ggplot 3.0.0 came out, the approach to plotting spatial data was to fortify it, meaning encode all the geometries as atomic vectors in a data.frame, keeping an ID column to register which coordinate belonged to which geometry, and repeating all non-geometry attributes for each geometry coordinate. This worked reasonably well for points and lines, but not very well for polygons with holes. Since ggplot 3.0.0 and package sf, this runs much smoother; ggplot has received a geom_sf function that could take an sf object and calls st_as_grob on each feature geometry to get an object that can directly be added to the plot. In addition to that, it takes care of automated datum transformations or projections if different objects have differing coordinate reference systems, and adds by default a graticule and degree axis tic labels. Moreno and Basille (2018a), Moreno and Basille (2018b) and Moreno and Basille (2018c) published three guest blogs on r-spatial.org explaining the capabilities of ggplot for making beautiful maps with sf and ggplot2. 10.1 geom_sf We will introduce the affordances of geom_sf here step by step. We use a projected version of nc library(tidyverse) library(sf) system.file(&quot;gpkg/nc.gpkg&quot;, package=&quot;sf&quot;) %&gt;% read_sf() %&gt;% st_transform(32119) -&gt; nc.32119 and create a first ggplot by ggplot() + geom_sf(data = nc.32119) It is attractive to think that ggplot(nc.32119) + geom_sf() would also work, but it doesn’t – it only works if the geometry column is named geometry, which is not always the case (sf objects may have more than one geometry column). If we want to get rid of the axis tics and grid lines, we could use ggplot() + geom_sf(data = nc.32119) + theme_void() + theme(panel.grid.major = element_line(color = &quot;white&quot;)) A first ggplot2 plot with polygons colored by attributes (as in figure 1.2) is created by ggplot() + geom_sf(data = nc.32119) + aes(fill = BIR74) + scale_fill_gradientn(colors = viridis::viridis(20)) 10.1.1 facet plots 10.1.2 multiple geometries in a single map 10.1.3 graticule control 10.2 using stars objects with ggplot2 Package stars comes with a geom_stars function that is much more limited in scope than geom_sf. In essence, it creates a call to geom_raster in case of raster data with a regular grid, to geom_tile for other raster data, or to geom_sf if the stars object has simple feature geometries. It also creates the mapping of dimension names to x and y-coordinates and set the first array name as the fill variable. This means that the aspect ratio still needs to be controlled (coord_equal()) and that a facet_wrap is needed to display multiple rasters. An example is shown in figure 10.1. library(stars) library(ggplot2) library(viridis) system.file(&quot;tif/L7_ETMs.tif&quot;, package = &quot;stars&quot;) %&gt;% read_stars() -&gt; x ggplot() + geom_stars(data = x) + coord_equal() + facet_wrap(~band) + scale_fill_viridis() + theme_void() + scale_x_discrete(expand=c(0,0))+ scale_y_discrete(expand=c(0,0)) Figure 10.1: example of geom_stars geom_stars has a parameter, downsample, which can be used to downsample particular dimensions. Here we downsample a 90m x 90m raster to a 900m x 900m raster: ggplot() + geom_stars(data = x, downsample = c(10,10,1)) + coord_equal() + facet_wrap(~band) + scale_fill_viridis() + theme_void() + scale_x_discrete(expand=c(0,0))+ scale_y_discrete(expand=c(0,0)) References "],
["interactive-maps.html", "Chapter 11 Interactive Maps", " Chapter 11 Interactive Maps base plot: identify, locator leaflet, tmap, mapview mapedit? "],
["summarizing-geometries.html", "Chapter 12 Summarizing Geometries", " Chapter 12 Summarizing Geometries Properties: dimension, length, area, etc, if not earlier in Ch 3? counts, density, intensity (units; meaningful) "],
["pp.html", "Chapter 13 Point Pattern Analysis", " Chapter 13 Point Pattern Analysis Basics PP, beyond counting; basic steps in PPA sf - spatstat interface; rasters; "],
["manipulating-attributes-summarise-aggregate-union-sample.html", "Chapter 14 Manipulating attributes: summarise, aggregate, union, sample", " Chapter 14 Manipulating attributes: summarise, aggregate, union, sample "],
["up-and-downscaling.html", "Chapter 15 Up- and Downscaling", " Chapter 15 Up- and Downscaling sampling largest sub-geometry area-weighted interpolation "],
["spatial-interpolation-and-geostatistics.html", "Chapter 16 Spatial Interpolation and geostatistics 16.1 Load meuse data 16.2 fit variogram 16.3 kriging to point locations: 16.4 kriging to stars grid: 16.5 Spatio-temporal", " Chapter 16 Spatial Interpolation and geostatistics 16.1 Load meuse data # this reloads meuse as data.frame, so library(sp) demo(meuse, ask = FALSE, echo = FALSE) library(sf) meuse_sf = st_as_sf(meuse) 16.2 fit variogram library(gstat) v = variogram(log(zinc)~1, meuse_sf) (v.fit = fit.variogram(v, vgm(1, &quot;Sph&quot;, 900, 1))) #&gt; model psill range #&gt; 1 Nug 0.0507 0 #&gt; 2 Sph 0.5906 897 16.3 kriging to point locations: (k_sf = krige(log(zinc)~1, meuse_sf, meuse_sf, v.fit)) #&gt; [using ordinary kriging] #&gt; Simple feature collection with 155 features and 2 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 179000 ymin: 330000 xmax: 181000 ymax: 334000 #&gt; epsg (SRID): NA #&gt; proj4string: +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857,0.350733,-1.87035,4.0812 +units=m +no_defs #&gt; First 10 features: #&gt; var1.pred var1.var geometry #&gt; 1 6.93 1.96e-33 POINT (181072 333611) #&gt; 2 7.04 1.96e-33 POINT (181025 333558) #&gt; 3 6.46 0.00e+00 POINT (181165 333537) #&gt; 4 5.55 1.96e-33 POINT (181298 333484) #&gt; 5 5.59 -1.11e-16 POINT (181307 333330) #&gt; 6 5.64 1.96e-33 POINT (181390 333260) #&gt; 7 5.85 1.11e-16 POINT (181165 333370) #&gt; 8 6.01 1.11e-16 POINT (181027 333363) #&gt; 9 5.85 -2.22e-16 POINT (181060 333231) #&gt; 10 5.21 -1.11e-16 POINT (181232 333168) plot(k_sf[1], pch = 16) 16.4 kriging to stars grid: library(stars) meuse_stars = st_as_stars(meuse.grid) k_st = krige(log(zinc)~1, meuse_sf, meuse_stars, v.fit) #&gt; [using ordinary kriging] plot(k_st, breaks = &quot;equal&quot;, col = sf.colors()) 16.5 Spatio-temporal see gstat/tests/windst.R see gstat/tests/stars.R "],
["area-data-and-spatial-correlation.html", "Chapter 17 Area Data and Spatial Correlation", " Chapter 17 Area Data and Spatial Correlation spdep stuff "],
["spatial-regression-and-autocorrelation.html", "Chapter 18 Spatial Regression and Autocorrelation", " Chapter 18 Spatial Regression and Autocorrelation intro; "],
["movement-data.html", "Chapter 19 Movement data", " Chapter 19 Movement data "],
["statistical-modelling-of-spatiotemporal-data.html", "Chapter 20 Statistical modelling of spatiotemporal data", " Chapter 20 Statistical modelling of spatiotemporal data "],
["sp-and-raster.html", "Chapter 21 sp and raster 21.1 links and differences between sf and sp 21.2 migration packages 21.3 raster, stars and sf", " Chapter 21 sp and raster 21.1 links and differences between sf and sp difference in data structures; how to convert; limitations of sf to sp conversion 21.2 migration packages link to sf wiki: https://github.com/r-spatial/sf/wiki/Migrating 21.3 raster, stars and sf map algebra; ABM; SDM; refer to Robert’s book on http://rspatial.org/ "],
["r-data-structures.html", "R data structures 21.4 Homogeneous vectors 21.5 Heterogeneous vectors: list 21.6 Attributes 21.7 various names attributes 21.8 using structure", " R data structures This chapter provides some minimal set of R basics that may make it easier to read this book. A more comprehensive book on R basics is given in (Wickham 2014a), chapter 2. As pointed out by (Chambers 2016), everything that exists in R is an object. This includes objects that make things happen, such as language objects or functions, but also the more basic “things”, such as data objects. 21.4 Homogeneous vectors Data objects contain data, and possibly metadata. Data is always in the form of a vector, which can have different type. We can find the type by typeof, and vector length by length. Vectors are created by c, which combines individual elements: typeof(1:10) #&gt; [1] &quot;integer&quot; length(1:10) #&gt; [1] 10 typeof(1.0) #&gt; [1] &quot;double&quot; length(1.0) #&gt; [1] 1 typeof(c(&quot;foo&quot;, &quot;bar&quot;)) #&gt; [1] &quot;character&quot; length(c(&quot;foo&quot;, &quot;bar&quot;)) #&gt; [1] 2 typeof(c(TRUE, FALSE)) #&gt; [1] &quot;logical&quot; Vectors of this kind can only have a single type. Note that vectors can have length zero, e.g. in, i = integer(0) typeof(i) #&gt; [1] &quot;integer&quot; i #&gt; integer(0) length(i) #&gt; [1] 0 We can retrieve (or in assignments: replace) elements in a vector using [ or [[: a = c(1,2,3) a[2] #&gt; [1] 2 a[[2]] #&gt; [1] 2 a[2:3] #&gt; [1] 2 3 a[2:3] = c(5,6) a #&gt; [1] 1 5 6 a[[3]] = 10 a #&gt; [1] 1 5 10 where the difference is that [ can operate on an index range (or multiple indexes), and [[ operates on a single vector value. 21.5 Heterogeneous vectors: list An additional vector type is the list, which can combine any types in its elements: l &lt;- list(3, TRUE, &quot;foo&quot;) typeof(l) #&gt; [1] &quot;list&quot; length(l) #&gt; [1] 3 For lists, there is a further distinction between [ and [[: the single [ returns always a list, and [[ returns the contents of a list element: l[1] #&gt; [[1]] #&gt; [1] 3 l[[1]] #&gt; [1] 3 For replacement, one case use [ when providing a list, and [[ when providing a new value: l[1:2] = list(4, FALSE) l #&gt; [[1]] #&gt; [1] 4 #&gt; #&gt; [[2]] #&gt; [1] FALSE #&gt; #&gt; [[3]] #&gt; [1] &quot;foo&quot; l[[3]] = &quot;bar&quot; l #&gt; [[1]] #&gt; [1] 4 #&gt; #&gt; [[2]] #&gt; [1] FALSE #&gt; #&gt; [[3]] #&gt; [1] &quot;bar&quot; In case list elements are named, as in l = list(first = 3, second = TRUE, third = &quot;foo&quot;) l #&gt; $first #&gt; [1] 3 #&gt; #&gt; $second #&gt; [1] TRUE #&gt; #&gt; $third #&gt; [1] &quot;foo&quot; we can use names as in l[[&quot;second&quot;]] and this can be abbreviated to l$second #&gt; [1] TRUE l$second = FALSE l #&gt; $first #&gt; [1] 3 #&gt; #&gt; $second #&gt; [1] FALSE #&gt; #&gt; $third #&gt; [1] &quot;foo&quot; This is convenient, but also requires name look-up in the names attribute (see below). 21.5.1 NULL and removing list elements NULL is the null value in R; it is special in the sense that it doesn’t work in simple comparisons: 3 == NULL # not FALSE! #&gt; logical(0) NULL == NULL # not even TRUE! #&gt; logical(0) but has to be treated specially, using is.null: is.null(NULL) #&gt; [1] TRUE When we want to remove one or more list elements, we can do so by creating a new list that does not contain the elements that needed removal, as in l = l[c(1,3)] # remove second, implicitly l #&gt; $first #&gt; [1] 3 #&gt; #&gt; $third #&gt; [1] &quot;foo&quot; but we can also assign NULL to the element we want to eliminate: l$second = NULL l #&gt; $first #&gt; [1] 3 #&gt; #&gt; $third #&gt; [1] &quot;foo&quot; 21.6 Attributes We can glue arbitrary metadata objects to data objects, as in a = 1:3 attr(a, &quot;some_meta_data&quot;) = &quot;foo&quot; a #&gt; [1] 1 2 3 #&gt; attr(,&quot;some_meta_data&quot;) #&gt; [1] &quot;foo&quot; and this can be retrieved, or replaced by attr(a, &quot;some_meta_data&quot;) #&gt; [1] &quot;foo&quot; attr(a, &quot;some_meta_data&quot;) = &quot;bar&quot; attr(a, &quot;some_meta_data&quot;) #&gt; [1] &quot;bar&quot; In essence, the attribute of an object is a named list, and we can get or set the complete list by attributes(a) #&gt; $some_meta_data #&gt; [1] &quot;bar&quot; attributes(a) = list(some_meta_data = &quot;foo&quot;) attributes(a) #&gt; $some_meta_data #&gt; [1] &quot;foo&quot; A number of attributes are treated specially by R, see e.g. ?attributes. 21.6.1 object class and class attribute Every object in R “has a class”, meaning that class(obj) returns a character vector with the class of obj. Some objects have an implicit class, e.g. vectors class(1:3) #&gt; [1] &quot;integer&quot; class(c(TRUE, FALSE)) #&gt; [1] &quot;logical&quot; class(c(&quot;TRUE&quot;, &quot;FALSE&quot;)) #&gt; [1] &quot;character&quot; but we can also set the class explicit, either by using attr or by using class in the left-hand side of an expression: a = 1:3 class(a) = &quot;foo&quot; a #&gt; [1] 1 2 3 #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;foo&quot; class(a) #&gt; [1] &quot;foo&quot; attributes(a) #&gt; $class #&gt; [1] &quot;foo&quot; in which case the newly set class overrides the earlier implicit class. This way, we can add methods for class foo, e.g. by print.foo = function(x, ...) print(paste(&quot;an object of class foo with length&quot;, length(x))) print(a) #&gt; [1] &quot;an object of class foo with length 3&quot; Providing such methods are generally intended to create more usable software, but at the same time they may make the objects more opaque. It is sometimes useful to see what an object “is made of” by printing it after the class attribute is removed, as in unclass(a) #&gt; [1] 1 2 3 As a more elaborate example, consider the case where a polygon is made using package sf: library(sf) p = st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,0)))) p #&gt; POLYGON ((0 0, 1 0, 1 1, 0 0)) which prints the well-known-text form; to understand what the data structure is like, we can use unclass(p) #&gt; [[1]] #&gt; [,1] [,2] #&gt; [1,] 0 0 #&gt; [2,] 1 0 #&gt; [3,] 1 1 #&gt; [4,] 0 0 21.6.2 the dim attribute The dim attribute sets the matrix or array dimensions: a = 1:8 class(a) #&gt; [1] &quot;integer&quot; attr(a, &quot;dim&quot;) = c(2,4) # or: dim(a) = c(2,4) class(a) #&gt; [1] &quot;matrix&quot; a #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 3 5 7 #&gt; [2,] 2 4 6 8 attr(a, &quot;dim&quot;) = c(2,2,2) # or: dim(a) = c(2,2,2) class(a) #&gt; [1] &quot;array&quot; a #&gt; , , 1 #&gt; #&gt; [,1] [,2] #&gt; [1,] 1 3 #&gt; [2,] 2 4 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] #&gt; [1,] 5 7 #&gt; [2,] 6 8 21.7 various names attributes Named vectors carry their names in a names attribute. We saw examples for lists above, an example for a numeric vector is: a = c(first = 3, second = 4, last = 5) a[&quot;second&quot;] #&gt; second #&gt; 4 attributes(a) #&gt; $names #&gt; [1] &quot;first&quot; &quot;second&quot; &quot;last&quot; More name attributes are e.g. dimnames of matrices or arrays: a = matrix(1:4, 2, 2) dimnames(a) = list(rows = c(&quot;row1&quot;, &quot;row2&quot;), cols = c(&quot;col1&quot;, &quot;col2&quot;)) a #&gt; cols #&gt; rows col1 col2 #&gt; row1 1 3 #&gt; row2 2 4 attributes(a) #&gt; $dim #&gt; [1] 2 2 #&gt; #&gt; $dimnames #&gt; $dimnames$rows #&gt; [1] &quot;row1&quot; &quot;row2&quot; #&gt; #&gt; $dimnames$cols #&gt; [1] &quot;col1&quot; &quot;col2&quot; Data.frame objects have rows and columns, and each have names: df = data.frame(a = 1:3, b = c(TRUE, FALSE, TRUE)) attributes(df) #&gt; $names #&gt; [1] &quot;a&quot; &quot;b&quot; #&gt; #&gt; $class #&gt; [1] &quot;data.frame&quot; #&gt; #&gt; $row.names #&gt; [1] 1 2 3 21.8 using structure When programming, the pattern of adding or modifying attributes before returning an object is extremely common, an example being: f = function(x) { a = create_obj(x) # call some other function attributes(a) = list(class = &quot;foo&quot;, meta = 33) a } The last two statements can be contracted in f = function(x) { a = create_obj(x) # call some other function structure(a, class = &quot;foo&quot;, meta = 33) } where function structure adds, replaces, or (in case of value NULL) removes attributes from the object in its first argument. References "],
["references.html", "References", " References "]
]
